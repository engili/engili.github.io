<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Animations | Lmt的博客]]></title>
  <link href="http://engili.github.io/blog/categories/animations/atom.xml" rel="self"/>
  <link href="http://engili.github.io/"/>
  <updated>2018-04-22T16:20:06+08:00</updated>
  <id>http://engili.github.io/</id>
  <author>
    <name><![CDATA[limengtian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Core Animation 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/04/21/coreanimation-notes/"/>
    <updated>2018-04-21T22:42:39+08:00</updated>
    <id>http://engili.github.io/blog/2018/04/21/coreanimation-notes</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>1. Implicit Animations</h3>

<ul>
<li>修改layer对象的可动画属性，会有默认的动画效果</li>
<li>当修改layer tree上的layer对象时，对象的属性立即改变，但是表现层的layer并没有立即改变，这个时候Core Animation 根据你修改的值，创建了默认时间函数和动画参数的动画，在下一个更新周期执行动画</li>
</ul>


<pre><code class="swift"> self.redView.layer.opacity = 0.0
</code></pre>

<h3>2. Explicit Animations</h3>

<ul>
<li>创建动画对象，并添加到layer上</li>
<li>和隐式动画不同，显式动画并不会修改layer 的数据model值</li>
<li>动画结束后，core animation 会使用layer当前的值，重绘layer</li>
</ul>


<pre><code class="swift">let animation = CABasicAnimation(keyPath: "opacity")
animation.fromValue = NSNumber(floatLiteral: 1.0)
animation.toValue = NSNumber(floatLiteral: 0.0)
animation.duration = 3.0

self.redView.layer.add(animation, forKey: "fadeAnimation")

//设置成最终的值
self.redView.layer.opacity = 0.0
</code></pre>

<h4>注：</h4>

<ul>
<li>隐式动画和显式动画执行时机都在当前<code>run loop cycle</code>结束</li>
<li>动画添加的线程，必须要有run loop，动画才能被执行</li>
<li>修改多个属性，或者添加多个动画，动画都是同时执行的</li>
</ul>


<h3>3. CAKeyframeAnimation 关键帧动画</h3>

<h4>3.1 <code>value</code></h4>

<pre><code class="swift">var values: [Any]? { get set }
</code></pre>

<ul>
<li><p>定义了关键帧动画一组的数值,数值里的元素需要进行一层包装</p>

<ul>
<li> <code>NSValue</code>: <code>CGRect</code>、<code>CATransform3D</code></li>
<li> <code>NSNumber</code>:<code>CGFloat</code></li>
<li> <code>Any</code>:<code>CGColorRef</code>、<code>CGImageRef</code></li>
</ul>
</li>
<li><p>只有当<code>path</code>属性是<code>nil</code>时，这个属性才生效</p></li>
</ul>


<h4>3.2 <code>path</code></h4>

<pre><code class="swift">var path: CGPath? { get set }
</code></pre>

<ul>
<li>对于一些类型为<code>CGPoint</code>的属性，如（<code>position</code>,<code>anchorPoint</code>），可以通过定义<code>path</code>来定义其关键帧动画的路径</li>
<li>设置了这个属性后，<code>values</code>就失效了</li>
</ul>


<h4>3.3 animation timing</h4>

<p>由三个部分共同作用控制动画的时间</p>

<ul>
<li><code>keyTimes</code></li>
<li><code>timingFunctions</code></li>
<li><code>calculationMode</code></li>
</ul>


<h5>3.3.1 <code>calculationMode</code></h5>

<pre><code class="swift">var calculationMode: String { get set }
</code></pre>

<ul>
<li>定义了关键帧定义的值之间的中间值如何计算</li>
<li>默认值是 <code>kCAAnimationLinear</code></li>
<li><code>kCAAnimationLinear</code>

<ul>
<li>关键帧<code>values</code>值之间，线性插值</li>
</ul>
</li>
<li><code>kCAAnimationCubic</code>

<ul>
<li>关键帧<code>values</code>值之间,经过圆滑曲线链接后，缓和的插值</li>
</ul>
</li>
<li><code>kCAAnimationDiscrete</code>

<ul>
<li>轮流使用关键帧<code>values</code>的值，没有中间插值被计算,离散的值</li>
</ul>
</li>
<li><code>kCAAnimationPaced</code>

<ul>
<li>忽略<code>keyTimes</code>和<code>timingFunctions</code></li>
<li>使动画均匀的进行</li>
</ul>
</li>
<li><code>kCAAnimationCubicPaced</code>

<ul>
<li>忽略<code>keyTimes</code>和<code>timingFunctions</code></li>
<li>动画均匀进行，更加缓和</li>
</ul>
</li>
</ul>


<h5>3.3.2 keyTimes</h5>

<pre><code class="swift">var keyTimes: [NSNumber]? { get set }
</code></pre>

<ul>
<li>类型<code>CGFloat</code>，范围0.0 - 1.0</li>
<li>值依次增大，代表整个动画时间的百分比</li>
<li>当使用线性或曲线性<code>calculationMode</code>时，数组第一个元素一定是是0.0，数组最后一个元素是1.0，每个value对应的时间值，依次在两者中间一一对应</li>
<li>当使用离散<code>calculationMode</code>时，数组第一个元素一定是是0.0，数组最后一个元素是1.0，中间元素的数目，要比value中数目大一个。</li>
<li>当使用固定速率的<code>calculationMode</code>时，这个属性被忽略</li>
</ul>


<h5>3.3.3 timingFunctions</h5>

<pre><code class="swift">var timingFunctions: [CAMediaTimingFunction]? { get set }
</code></pre>

<ul>
<li>定义两个关键帧直接动画的时间函数</li>
<li>数目为<code>values</code>数目减1</li>
<li>和<code>keyTimes</code>共同决定每两个关键帧之间的timing</li>
<li>If you also specify a timing function in the animation object’s timingFunction property, that function is applied first followed by the timing function for the specific keyframe segment.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CALayer 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/04/05/calayer-notes/"/>
    <updated>2018-04-05T17:05:05+08:00</updated>
    <id>http://engili.github.io/blog/2018/04/05/calayer-notes</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>CoreAnimation</h1>

<p><code>CoreAnimation</code>将视图转换为<code>位图</code>，可以直接在<code>GPU</code>上操作，实现动画效果</p>

<h1>CALayer (Model Object)</h1>

<ul>
<li>CALayer是Model Objcet</li>
<li>主要管理<code>位图</code>数据信息，位图内容可以是View绘制也可以是设置的图片</li>
<li>大多数Layer不进行绘制，只是将View的内容换成为位图</li>
</ul>


<h1>CALayer 坐标</h1>

<h2>point-based 坐标系统</h2>

<ul>
<li>基于屏幕坐标系统，可以表示layer之间的关系</li>
<li><code>bounds</code>和<code>position</code>属性</li>
</ul>


<h2>unit 坐标系统</h2>

<ul>
<li>和屏幕坐标系统无关</li>
<li><code>anchorPoint</code>

<ul>
<li>默认值是（0.5.0.5） 取值范围 0 - 1</li>
<li>影响<code>position</code>属性

<ul>
<li>当anchorPoint为（0，0）时，<code>position</code>在layer左上角</li>
<li>当anchorPoint为（1，1）时，<code>position</code>在layer右下角</li>
<li>当anchorPoint为（0.5，0.5）时，<code>position</code>在layer中心</li>
</ul>
</li>
<li>影响旋转<code>transform</code>的中心点</li>
</ul>
</li>
</ul>


<h1>Layer Trees</h1>

<ul>
<li>layer tree

<ul>
<li>layer Model对象，管理位图数据</li>
</ul>
</li>
<li>presentation tree

<ul>
<li>当动画正在进行的时候，可以通过<code>presentation tree</code> 获取当前状态的值</li>
</ul>
</li>
</ul>


<pre><code class="swift">func presentation() -&gt; Self?
</code></pre>

<p>这个方法，返回 屏幕上正在动画，当前状态下的layer。这个layer对象的sublayers, mask, and superlayer 属性得到的对象都是在<code>presentation tree</code>上</p>

<ul>
<li>render tree

<ul>
<li>执行实际的动画layer，私有类</li>
</ul>
</li>
</ul>


<h1>改变UIView底层对应的Layer</h1>

<ul>
<li>重写<code>layerClass</code>方法即可</li>
</ul>


<pre><code class="swift">override class var layerClass: Swift.AnyClass {
        get {
            return CAGradientLayer.self
        }
    }
</code></pre>

<h1>CALayer subclasses</h1>

<!--- CAEmitterLayer

Used to implement a Core Animation–based particle emitter system. The emitter layer object controls the generation of the particles and their origin.-->


<h3>CAGradientLayer</h3>

<ul>
<li>绘制渐变色的Layer</li>
</ul>


<h4>property</h4>

<ul>
<li><code>var colors: [Any]? { get set }</code>

<ul>
<li>数组元素为<code>CGColorRef</code> 才能生效</li>
</ul>
</li>
<li><code>var locations: [NSNumber]? { get set }</code>

<ul>
<li>数组元素为0到1 增长数， 表示颜色停止的区间</li>
<li>数目和<code>colors</code>相同</li>
</ul>
</li>
<li><code>var startPoint: CGPoint { get set }</code>

<ul>
<li>unit 坐标系统属性，渐变色开始位置</li>
<li>默认值是(0.5,0)</li>
</ul>
</li>
<li><code>var endPoint: CGPoint { get set }</code>

<ul>
<li>unit 坐标系统属性，渐变色结束位置</li>
<li>默认值是(0.5,1)</li>
</ul>
</li>
</ul>


<p>创建一个渐变色Layer</p>

<pre><code class="swift"> class MTGradientView: UIView {
    override class var layerClass: Swift.AnyClass  {
        return CAGradientLayer.self
    }

    override init(frame: CGRect) {
        super.init(frame: frame)
        self.setupLayer()
    }

    fileprivate func setupLayer() {
        gradientLayer?.colors = [UIColor.red.cgColor, UIColor.yellow.cgColor]
        gradientLayer?.locations = [0.5,1]
        gradientLayer?.startPoint = .zero
        gradientLayer?.endPoint = CGPoint(x: 1, y: 1)
    }

 }
</code></pre>

<!--
- CAMetalLayer

Used to set up and vend drawable textures for rendering layer content using Metal.

- CAEAGLLayer/CAOpenGLLayer

Used to set up the backing store and context for rendering layer content using OpenGL ES (iOS) or OpenGL (OS X).

- CAReplicatorLayer

Used when you want to make copies of one or more sublayers automatically. The replicator makes the copies for you and uses the properties you specify to alter the appearance or attributes of the copies.

- CAScrollLayer

Used to manage a large scrollable area composed of multiple sublayers.

- CAShapeLayer

Used to draw a cubic Bezier spline. Shape layers are advantageous for drawing path-based shapes because they always result in a crisp path, as opposed to a path you draw into a layer’s backing store, which would not look as good when scaled. However, the crisp results do involve rendering the shape on the main thread and caching the results.

- CATextLayer

Used to render a plain or attributed string of text.

- CATiledLayer

Used to manage a large image that can be divided into smaller tiles and rendered individually with support for zooming in and out of the content.

- CATransformLayer

Used to render a true 3D layer hierarchy, rather than the flattened layer hierarchy implemented by other layer classes.

- QCCompositionLayer

Used to render a Quartz Composer composition. (OS X only)
-->


<h1>设置Layer content</h1>

<h3>设置Lyaer的content，三种方法</h3>

<h5>1. 给layer的<code>contents</code>属性，设置图片（适用于内容几乎不会或者很少改变</h5>

<ul>
<li><code>var contents: Any? { get set }</code> 使用<code>CGImage</code></li>
<li>赋值这个属性后，layer就会使用这个图片，而不会生成自己的<code>backing store</code></li>
<li>和UIView绑定的layer，最后不要单独设置这个属性</li>
</ul>


<h5>2. 给layer设置<code>delegate</code>,让委托去绘制内容</h5>

<ul>
<li><code>UIView</code>底层的layer，自动和UIView设置了委托关系</li>
<li><p><code>weak var delegate: CALayerDelegate? { get set }</code></p></li>
<li><p><code>func display(_ layer: CALayer)</code></p>

<ul>
<li>当layer被标记为content需要reload是，例如在<code>setNeedsDisplay</code> 后会调用到该方法</li>
<li>在该方法中，一般通过设置layer的contens属性
<code>swift
func display(_ layer: CALayer) {
 if let image = self.loadImageFromBundle() {
     layer.bounds = CGRect(x: 0, y: 0, width: image.width, height: image.height)
     layer.contents = image
 }
}
</code></li>
</ul>
</li>
<li><code>func draw(_ layer: CALayer, in ctx: CGContext)</code>

<ul>
<li>当layer被标记为content需要reload是，例如在<code>setNeedsDisplay</code> 后会调用到该方法</li>
<li>如果委托实现了<code>display(_ :)</code>，该方法不会被调用</li>
</ul>
</li>
<li><code>func layerWillDraw(_ layer: CALayer)</code>

<ul>
<li>在绘制回调<code>draw(_ , in ctx:)</code> 之前被调用</li>
</ul>
</li>
</ul>


<pre><code class="swift">func draw(_ layer: CALayer, in ctx: CGContext) {
    let path = CGMutablePath()

    path.move(to: .zero)
    path.addRect(CGRect(x: 0, y: 0, width: 100, height: 100))

    ctx.setLineWidth(5.0)
    ctx.setStrokeColor(UIColor.red.cgColor)
    ctx.addPath(path)

    ctx.strokePath()
}

func layerWillDraw(_ layer: CALayer) {
    //called before draw(_ , in ctx:) 
}
</code></pre>

<ul>
<li><p><code>func layoutSublayers(of layer: CALayer)</code></p>

<ul>
<li>当layer的<code>bounds</code>改变时，需要重新对子layer进行布局</li>
</ul>
</li>
<li><p><code>func action(for layer: CALayer, forKey event: String) -&gt; CAAction?</code></p></li>
</ul>


<pre><code>func action(for layer: CALayer, forKey event: String) -&gt; CAAction? {
    guard event == "moveRight" else {
        return nil
    }

    let animation = CABasicAnimation()
    animation.valueFunction = CAValueFunction.init(name: kCAValueFunctionTranslateX)
    animation.fromValue = 1
    animation.toValue = 300
    animation.duration = 2

    return animation
}

// 外界调用
fileprivate func moveLayerToRight() {
    guard let action = startLayer.action(forKey: "moveRight") else {
        return
    }

    action.run(forKey: "transform", object: startLayer, arguments: nil)
}
</code></pre>

<h5>3. 定义layer的子类，重写绘制的方法</h5>

<ul>
<li><code>func display()</code>

<ul>
<li>该方法的默认实现是，若当前layer有delegate，会去调用delegate 的 <code>func display(_ layer: CALayer)</code> 方法，若delegate，没有实现这个方法，这个方法，创建back store，然后调用layer的<code>func draw(in ctx: CGContext)</code></li>
<li>当layer被标记为content需要reload是，例如在<code>setNeedsDisplay</code> 后会调用到该方法</li>
<li>在该方法中，一般通过设置layer的contens属性</li>
</ul>
</li>
<li><code>func draw(in ctx: CGContext)</code>

<ul>
<li>绘制</li>
</ul>
</li>
</ul>


<h3>Contents Property</h3>

<ul>
<li><p>position-based gravity constants</p>

<p>  <img class="<a" src="href="https://github.com/engili/engili.github.io/raw/master/images/layer_contentsgravity1_2x.png">https://github.com/engili/engili.github.io/raw/master/images/layer_contentsgravity1_2x.png</a>" width="547"></p></li>
<li><p>scalling-based gravity constatns</p>

<p>  <img class="<a" src="href="https://github.com/engili/engili.github.io/raw/master/images/positioningmask_2x.png">https://github.com/engili/engili.github.io/raw/master/images/positioningmask_2x.png</a>" width="472" height="255"></p></li>
</ul>


<h4>定义Layer其他外观</h4>

<ul>
<li><code>background</code> 位于contents image 下</li>
<li><code>border</code> 位于contens image 上</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIKit Animations 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/03/24/uikit-animations-note/"/>
    <updated>2018-03-24T21:33:06+08:00</updated>
    <id>http://engili.github.io/blog/2018/03/24/uikit-animations-note</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>1. UIView 可动画属性 (Animatable Property)</h3>

<ul>
<li>frame

<ul>
<li>当<code>transform</code> 属性不为<code>identity</code>时，<code>frame</code>是未定义的，使用<code>bounds</code>或<code>center</code>做动画</li>
</ul>
</li>
<li>bounds</li>
<li>center</li>
<li>transform</li>
<li>alpha</li>
<li>backgroundColor</li>
<li><del>contentStretch</del> (iOS 7.0弃用）

<ul>
<li><del>Modify this property to change the way the view’s contents are stretched to fill the available space.</del></li>
</ul>
</li>
</ul>


<h5>注：改变某个正在进行的动画的属性的值，并不会打断动画，而是动画继续执行，并且最终态到你设置的那个值</h5>

<h3>2. Animations Block-Based Methods</h3>

<pre><code class="swift">class func animate(withDuration duration: TimeInterval, animations: @escaping () -&gt; Void)
</code></pre>

<ul>
<li>这个方法使用<code>curveEaseInOut</code>和<code>transitionNone</code>选项，动画期间动画的View不响应用户交互</li>
</ul>


<pre><code class="swift">class func animate(withDuration duration: TimeInterval, animations: @escaping () -&gt; Void, completion: ((Bool) -&gt; Void)? = nil)
</code></pre>

<ul>
<li><code>completion</code>,如果<code>duration</code>值是0，block会在下一个<code>runloop cycle</code>被调用</li>
</ul>


<pre><code class="swift">class func animate(withDuration duration: TimeInterval, delay: TimeInterval, options: UIViewAnimationOptions = [], animations: @escaping () -&gt; Void, completion: ((Bool) -&gt; Void)? = nil)
</code></pre>

<ul>
<li><code>options</code> 可以设置一个或者多个，以数组的形式</li>
</ul>


<h4>2.1 UIViewAnimationOptions</h4>

<h5>2.1.1 常规属性（可以设置多个）</h5>

<ul>
<li>layoutSubviews

<ul>
<li>layout子View，让他们随父view一起动画</li>
</ul>
</li>
</ul>


<pre><code class="swift 必须重写view的LayoutSubViews方法">//  MTAnimateView.swift
class MTAnimateView: UIView {
    var subview: UIView!
    override func layoutSubviews() {
        let bounds = self.bounds
        subview.frame = CGRect(x: 0, y: 0, width: bounds.width / 2, height: bounds.height / 2)
    }
}

//UIViewController.swift
class ViewController: UIViewController {
    var redView: MTAnimateView!
    //动画block 扩大bounds，长宽各100，不带`layoutSubviews` 动画效果就很奇怪
    func animateWithLayoutSubViews() {
        let orginBounds = redView.bounds
        UIView.animate(withDuration: 1.0, delay: 0.0, options: .layoutSubviews, animations: {
            self.redView.bounds = CGRect(x: orginBounds.origin.x, y: orginBounds.origin.y, width: orginBounds.width + 100, height: orginBounds.height + 100)
        }) { (_) in
            self.redView.bounds = orginBounds
        }
    }

}
</code></pre>

<ul>
<li>allowUserInteraction

<ul>
<li>响应动画时的用户交互</li>
</ul>
</li>
<li><p>beginFromCurrentState</p>

<blockquote><p>If this key is not present, all in-flight animations are allowed to finish before the new animation is started. If another animation is not in flight, this key has no effect.</p></blockquote></li>
<li><p>`repeat`</p>

<ul>
<li>重复动画</li>
</ul>
</li>
</ul>


<pre><code class="swift">    UIView.animate(withDuration: 0.5, delay: 0.0, options: .repeat, animations: {
                //重复执行3次
                UIView.setAnimationRepeatCount(3)
                ...
            }, completion: nil)
</code></pre>

<ul>
<li>autoreverse

<ul>
<li>与<code>repeat</code>配合使用，动画能回溯</li>
</ul>
</li>
<li>overrideInheritedDuration

<ul>
<li>忽略嵌套动画的时间,使用自己设置的<code>duration</code></li>
</ul>
</li>
<li>overrideInheritedCurve

<ul>
<li>忽略嵌套动画的时间曲线，使用自己设置的时间曲线</li>
</ul>
</li>
</ul>


<pre><code class="swift 嵌套动画">    UIView.animate(withDuration: 2.0, delay: 0.0, options: .curveEaseIn, animations: {
            self.redView.center = redViewNewCenter
            UIView.animate(withDuration: 0.5, delay: 0.0, options: [.curveEaseOut, .overrideInheritedDuration, .overrideInheritedCurve], animations: {
                self.blueView.center = blueViewNewCenter
            }, completion: { (_) in
                self.blueView.center = blueViewOriginalCenter
            })
        }) { (_) in
            self.redView.center = redViewOriginalCenter
    }
</code></pre>

<ul>
<li>allowAnimatedContent

<ul>
<li>动画的时候，重绘View，没设置这个选项的时候，动画都是使用的截图</li>
</ul>
</li>
<li>showHideTransitionViews

<ul>
<li>用于转场动画</li>
</ul>
</li>
</ul>


<blockquote><p>When present, this key causes views to be hidden or shown (instead of removed or added) when performing a view transition. Both views must already be present in the parent view’s hierarchy when using this key. If this key is not present, the to-view in a transition is added to, and the from-view is removed from, the parent view’s list of subviews.</p></blockquote>

<ul>
<li>overrideInheritedOptions</li>
</ul>


<h5>2.1.2 速度属性 （可以设置一个）</h5>

<ul>
<li>curveEaseInOut

<ul>
<li>开始慢，中间加速，结尾慢</li>
</ul>
</li>
<li>curveEaseIn

<ul>
<li>开始慢，一直加速</li>
</ul>
</li>
<li>curveEaseOut

<ul>
<li>开始快，一直减速</li>
</ul>
</li>
<li>curveLinear

<ul>
<li>均匀的</li>
</ul>
</li>
</ul>


<h5>2.1.3 转场动画属性 （可以设置一个）</h5>

<ul>
<li>transitionFlipFromLeft</li>
<li>transitionFlipFromRight</li>
<li>transitionCurlUp</li>
<li>transitionCurlDown</li>
<li>transitionCrossDissolve</li>
<li>transitionFlipFromTop</li>
<li>transitionFlipFromBottom</li>
<li>preferredFramesPerSecond30</li>
<li>preferredFramesPerSecond60</li>
</ul>


<h3>3. 嵌套动画</h3>

<p>嵌套动画，是嵌套在其他动画block中的动画，他开始动画的时间和他父动画一样，并且继承父动画的时间，时间曲线和其他动画配置。
可以通过<code>overrideInheritedDuration</code>、<code>overrideInheritedCurve</code> 来使用自己的配置做动画</p>

<h3>4. 转场动画 (动画效果比较浮夸，用的较少)</h3>

<pre><code class="swift">class func transition(with view: UIView, duration: TimeInterval, options: UIViewAnimationOptions = [], animations: (() -&gt; Void)?, completion: ((Bool) -&gt; Void)? = nil)
</code></pre>

<ul>
<li>在<code>view</code>中进行转场动画</li>
<li>在<code>animations</code>中可以add、remove、hide、show view，如果想要其他动画效果，需要配置<code>allowAnimatedContent</code></li>
</ul>


<pre><code class="swift 示例">UIView.transition(with: redView, duration: 1.0, options: .transitionFlipFromLeft, animations: {
            self.greenView.isHidden = false
            self.blueView.isHidden = true
        }, completion: nil)
</code></pre>

<pre><code class="swift">class func transition(from fromView: UIView, to toView: UIView, duration: TimeInterval, options: UIViewAnimationOptions = [], completion: ((Bool) -&gt; Void)? = nil)
</code></pre>

<ul>
<li>这个方法，从<code>fromView</code>转场到<code>toView</code></li>
<li>系统实现是直接从视图层级中移除，可以使用 <code>showHideTransitionViews</code> 只是显示和隐藏两个view</li>
</ul>


<h3>5. UIViewPropertyAnimator</h3>

<h5>5.1.1 构造方法</h5>

<pre><code class="swift ">convenience init(duration: TimeInterval, curve: UIViewAnimationCurve, animations: (() -&gt; Void)? = nil)
</code></pre>

<ul>
<li>构造函数 创建出的animator是<code>inactive</code>状态</li>
<li>需要调用<code>startAnimation()</code>开始动画</li>
</ul>


<h5>5.1.2 添加动画</h5>

<pre><code class="swift">func addAnimations(_ animation: @escaping () -&gt; Void)
</code></pre>

<ul>
<li>可以通过这个方法，添加多个动画block</li>
<li><code>inactive</code> 状态下，添加的动画，进行时间是配置的时间，<code>active</code>状态下，添加的动画，进行的时间，是animtor剩余的时间</li>
<li><code>stopped</code>状态下，添加动画，会报错</li>
</ul>


<h5>5.1.3 添加动画结束回调</h5>

<pre><code class="swift"> func addCompletion(_ completion: @escaping (UIViewAnimatingPosition) -&gt; Void)
</code></pre>

<ul>
<li>动画正常结束时，执行回调</li>
<li>调用<code>stopAnimation(_:)</code> 参数设置<code>true</code>,执行回调</li>
<li>调用<code>stopAnimation(_:)</code> 参数设置<code>false</code>,在<code>finishAnimation(at:)</code>调用后，执行回调</li>
</ul>


<h5>5.1.4 continueAnimation</h5>

<p>调整一个暂停动画的 时间函数 和 时间</p>

<pre><code class="swift">func continueAnimation(withTimingParameters parameters: UITimingCurveProvider?, durationFactor: CGFloat)
</code></pre>

<ul>
<li>调用该方法，需要animtor处于<code>active</code>且暂停的状态</li>
<li>当状态处于非<code>active</code>,或动画正在进行，或者 <code>isInterruptible</code>属性是false时 会报错</li>
<li><code>parameters</code>: 新的时间函数，但是为了避免，动画有跳动的现象，一般改变时间函数后，会有一定的过渡效果</li>
<li><code>durationFactor</code>: 时间乘法因子，和原有的时间，相乘，获取最终的时间</li>
<li>当这次动画结束后，才会重写aniator的<code>timing</code>和<code>duration</code>属性</li>
</ul>


<h4>5.2 UIViewAnimating</h4>

<h5>5.2.1 UIViewAnimatingState</h5>

<ul>
<li>inactive

<ul>
<li>构造方法创建的animator初始状态</li>
</ul>
</li>
<li>active

<ul>
<li>当调用<code>startAnimation()</code> 或 <code>pauseAnimation()</code> 后，处于这个状态</li>
</ul>
</li>
<li>stopped

<ul>
<li>动画自然结束，或者调用<code>stopAnimation(_:)</code></li>
<li>调用<code>stopAnimation(_:)</code>,会让动画停留在当前值，而不是最终动画设定的值</li>
</ul>
</li>
</ul>


<p><img class="<a" src="href="https://github.com/engili/engili.github.io/raw/master/images/animation_states_2x.png">https://github.com/engili/engili.github.io/raw/master/images/animation_states_2x.png</a>" width="373" height="236"></p>

<h5>5.2.2 UIViewAnimatingPosition</h5>

<ul>
<li>end</li>
<li>start</li>
<li>current</li>
</ul>


<h5>5.2.3 动画状态改变</h5>

<ul>
<li><code>startAnimation()</code>

<ul>
<li>开始一个动画，或者恢复一个暂停的动画</li>
<li><code>stopped</code>状态的动画，不能调用该方法</li>
</ul>
</li>
<li><code>pauseAnimation()</code>

<ul>
<li>暂停动画</li>
<li><code>inactive</code>动画调用后，转为<code>active状态</code>，并且动画处于暂停状态</li>
</ul>
</li>
<li><code>stopAnimation(_:)</code> 使动画，在当前状态停止</li>
</ul>


<pre><code class="swift">func stopAnimation(_ withoutFinishing: Bool)
</code></pre>

<ul>
<li><p><code>withoutFinishing</code>:</p>

<ul>
<li>设置为<code>true</code>,animator进入<code>inactive</code>状态</li>
<li>设置为<code>false</code>,animator进入<code>stopped</code>状态，之后可以进行一些其他操作，</li>
</ul>
</li>
<li><p><code>finishAnimation(at:)</code>使得动画结束，animator回到<code>inactive</code></p></li>
</ul>


<h5>5.2.4 可交互动画</h5>

<ul>
<li><code>fractionComplete</code>

<ul>
<li>动画完成百分比</li>
<li>通过修改这个值，可以使animator进行到相应的过程</li>
</ul>
</li>
</ul>


<pre><code class="swift 一个可交互动画例子">
@objc fileprivate func handleInterruptableGesture(_ gesture: UIPanGestureRecognizer) {
    let offset = UIScreen.main.bounds.width - 100
    switch gesture.state {
    case .began:
        if interruptableAnimator == nil {
            interruptableAnimator = UIViewPropertyAnimator(duration: 3.0, curve: .easeOut, animations: {
                self.interruptableAnimtionView.frame = self.interruptableAnimtionView.frame.offsetBy(dx: offset, dy: 0)
            })
        }
        interruptableAnimator!.pauseAnimation()
        progressWhenInterrupted = interruptableAnimator!.fractionComplete
    case .changed:
        let translation = gesture.translation(in: self.interruptableAnimtionView)
        interruptableAnimator!.fractionComplete = (translation.x / offset) + progressWhenInterrupted

    case .ended, .cancelled:
        let timing = UICubicTimingParameters(animationCurve: .easeOut)
        interruptableAnimator!.continueAnimation(withTimingParameters: timing, durationFactor: 0)
    default:
        break
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
