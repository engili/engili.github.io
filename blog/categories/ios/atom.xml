<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Lmt的博客]]></title>
  <link href="http://engili.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://engili.github.io/"/>
  <updated>2018-05-06T08:14:09+08:00</updated>
  <id>http://engili.github.io/</id>
  <author>
    <name><![CDATA[limengtian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Core Animation 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/04/21/coreanimation-notes/"/>
    <updated>2018-04-21T22:42:39+08:00</updated>
    <id>http://engili.github.io/blog/2018/04/21/coreanimation-notes</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>CoreAnimation</h2>

<p><code>CoreAnimation</code>将视图转换为<code>位图</code>，可以直接在<code>GPU</code>上操作，实现动画效果</p>

<h3>1. Implicit Animations</h3>

<ul>
<li>修改layer对象的可动画属性，会有默认的动画效果</li>
<li>当修改layer tree上的layer对象时，对象的属性立即改变，但是表现层的layer并没有立即改变，这个时候Core Animation 根据你修改的值，创建了默认时间函数和动画参数的动画，在下一个更新周期执行动画</li>
</ul>


<pre><code class="swift"> self.redView.layer.opacity = 0.0
</code></pre>

<h3>2. Explicit Animations</h3>

<ul>
<li>创建动画对象，并添加到layer上</li>
<li>和隐式动画不同，显式动画并不会修改layer 的数据model值</li>
<li>动画结束后，core animation 会使用layer当前的值，重绘layer</li>
</ul>


<pre><code class="swift">let animation = CABasicAnimation(keyPath: "opacity")
animation.fromValue = NSNumber(floatLiteral: 1.0)
animation.toValue = NSNumber(floatLiteral: 0.0)
animation.duration = 3.0

self.redView.layer.add(animation, forKey: "fadeAnimation")

//设置成最终的值
self.redView.layer.opacity = 0.0
</code></pre>

<h4>注：</h4>

<ul>
<li>隐式动画和显式动画执行时机都在当前<code>run loop cycle</code>结束</li>
<li>动画添加的线程，必须要有run loop，动画才能被执行</li>
<li>修改多个属性，或者添加多个动画，动画都是同时执行的</li>
</ul>


<h3>3. CAKeyframeAnimation 关键帧动画</h3>

<h4>3.1 <code>value</code></h4>

<pre><code class="swift">var values: [Any]? { get set }
</code></pre>

<ul>
<li><p>定义了关键帧动画一组的数值,数值里的元素需要进行一层包装</p>

<ul>
<li> <code>NSValue</code>: <code>CGRect</code>、<code>CATransform3D</code></li>
<li> <code>NSNumber</code>:<code>CGFloat</code></li>
<li> <code>Any</code>:<code>CGColorRef</code>、<code>CGImageRef</code></li>
</ul>
</li>
<li><p>只有当<code>path</code>属性是<code>nil</code>时，这个属性才生效</p></li>
</ul>


<h4>3.2 <code>path</code></h4>

<pre><code class="swift">var path: CGPath? { get set }
</code></pre>

<ul>
<li>对于一些类型为<code>CGPoint</code>的属性，如（<code>position</code>,<code>anchorPoint</code>），可以通过定义<code>path</code>来定义其关键帧动画的路径</li>
<li>设置了这个属性后，<code>values</code>就失效了</li>
</ul>


<h4>3.3 animation timing</h4>

<p>由三个部分共同作用控制动画的时间</p>

<ul>
<li><code>keyTimes</code></li>
<li><code>timingFunctions</code></li>
<li><code>calculationMode</code></li>
</ul>


<h5>3.3.1 <code>calculationMode</code></h5>

<pre><code class="swift">var calculationMode: String { get set }
</code></pre>

<ul>
<li>定义了关键帧定义的值之间的中间值如何计算</li>
<li>默认值是 <code>kCAAnimationLinear</code></li>
<li><code>kCAAnimationLinear</code>

<ul>
<li>关键帧<code>values</code>值之间，线性插值</li>
</ul>
</li>
<li><code>kCAAnimationCubic</code>

<ul>
<li>关键帧<code>values</code>值之间,经过圆滑曲线链接后，缓和的插值</li>
</ul>
</li>
<li><code>kCAAnimationDiscrete</code>

<ul>
<li>轮流使用关键帧<code>values</code>的值，没有中间插值被计算,离散的值</li>
</ul>
</li>
<li><code>kCAAnimationPaced</code>

<ul>
<li>忽略<code>keyTimes</code>和<code>timingFunctions</code></li>
<li>使动画均匀的进行</li>
</ul>
</li>
<li><code>kCAAnimationCubicPaced</code>

<ul>
<li>忽略<code>keyTimes</code>和<code>timingFunctions</code></li>
<li>动画均匀进行，更加缓和</li>
</ul>
</li>
</ul>


<h5>3.3.2 keyTimes</h5>

<pre><code class="swift">var keyTimes: [NSNumber]? { get set }
</code></pre>

<ul>
<li>类型<code>CGFloat</code>，范围0.0 - 1.0</li>
<li>值依次增大，代表整个动画时间的百分比</li>
<li>当使用线性或曲线性<code>calculationMode</code>时，数组第一个元素一定是是0.0，数组最后一个元素是1.0，每个value对应的时间值，依次在两者中间一一对应</li>
<li>当使用离散<code>calculationMode</code>时，数组第一个元素一定是是0.0，数组最后一个元素是1.0，中间元素的数目，要比value中数目大一个。</li>
<li>当使用固定速率的<code>calculationMode</code>时，这个属性被忽略</li>
</ul>


<h5>3.3.3 timingFunctions</h5>

<pre><code class="swift">var timingFunctions: [CAMediaTimingFunction]? { get set }
</code></pre>

<ul>
<li>定义两个关键帧直接动画的时间函数</li>
<li>数目为<code>values</code>数目减1</li>
<li>和<code>keyTimes</code>共同决定每两个关键帧之间的timing</li>
<li>If you also specify a timing function in the animation object’s timingFunction property, that function is applied first followed by the timing function for the specific keyframe segment.</li>
</ul>


<h3>4. 移除显示动画</h3>

<pre><code class="swift">func removeAnimation(forKey key: String)
</code></pre>

<ul>
<li>移除特定key值的动画，添加动画时定义的key值</li>
</ul>


<pre><code class="swift">func removeAllAnimations()
</code></pre>

<ul>
<li>移除所有动画</li>
</ul>


<p>当一个正在进行的动画被移除的时候，core animation 使用layer的值（一般是动画结束的值）来重绘制，可能就会出现抖动。可以使用表现层layer的值，来设置layer的值</p>

<h3>5. 自定义动画的时间</h3>

<ul>
<li><code>beginTime</code>: 动画默认在下一个run loop cycle 开始时执行，定义beginTime 可以让动画延迟执行，也可以让几个动画，串行执行</li>
<li><code>timeOffset</code> 可以让animation group中的某些动画，延后执行</li>
</ul>


<h3>6.性能建议</h3>

<ul>
<li>尽量保持<code>opaque</code>属性为<code>true</code></li>
<li><code>CAShapeLayer</code>尽量使用简单的<code>path</code>,较为复杂的实现，可以转换为多个简单<code>path</code>的<code>CAShapeLayer</code>的组合</li>
<li>若使用自己的图片，尽量直接设置<code>contents</code>属性,layer就不会为 back store消耗内存，而直接使用提供的图片</li>
<li>尽量使用整数设置layer的宽高</li>
<li>使用异步渲染 <code>drawsAsynchronously</code>,一般绘制回调，如<code>drawRect:</code>都是在主线程进行的，设置<code>drawsAsynchronously</code>属性后，会在异步线程进行回调，但需要注意线程安全，同时使用的时候，实际测量是否真的提高性能了</li>
<li>添加阴影的时候，设置<code>shadowPath</code>，而不是让Core Animation去决定阴影，</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CALayer 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/04/05/calayer-notes/"/>
    <updated>2018-04-05T17:05:05+08:00</updated>
    <id>http://engili.github.io/blog/2018/04/05/calayer-notes</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>1. CALayer (Model Object)</h3>

<ul>
<li>CALayer是Model Objcet</li>
<li>主要管理<code>位图</code>数据信息，位图内容可以是View绘制也可以是设置的图片</li>
<li>大多数Layer不进行绘制，只是将View的内容换成为位图</li>
</ul>


<h4>1.1 CALayer 坐标</h4>

<h5>1.1.1  point-based 坐标系统</h5>

<ul>
<li>基于屏幕坐标系统，可以表示layer之间的关系</li>
<li><code>bounds</code>和<code>position</code>属性</li>
</ul>


<h5>1.1.2 unit 坐标系统</h5>

<ul>
<li>和屏幕坐标系统无关</li>
<li><code>anchorPoint</code>

<ul>
<li>默认值是（0.5.0.5） 取值范围 0 - 1</li>
<li>影响<code>position</code>属性

<ul>
<li>当anchorPoint为（0，0）时，<code>position</code>在layer左上角</li>
<li>当anchorPoint为（1，1）时，<code>position</code>在layer右下角</li>
<li>当anchorPoint为（0.5，0.5）时，<code>position</code>在layer中心</li>
</ul>
</li>
<li>影响旋转<code>transform</code>的中心点</li>
</ul>
</li>
</ul>


<h3>2. Layer Trees</h3>

<ul>
<li>layer tree

<ul>
<li>layer Model对象，管理位图数据</li>
</ul>
</li>
<li>presentation tree

<ul>
<li>当动画正在进行的时候，可以通过<code>presentation tree</code> 获取当前状态的值</li>
</ul>
</li>
</ul>


<pre><code class="swift">func presentation() -&gt; Self?
</code></pre>

<p>这个方法，返回 屏幕上正在动画，当前状态下的layer。这个layer对象的sublayers, mask, and superlayer 属性得到的对象都是在<code>presentation tree</code>上</p>

<ul>
<li>render tree

<ul>
<li>执行实际的动画layer，私有类</li>
</ul>
</li>
</ul>


<h3>3. 改变UIView底层对应的Layer</h3>

<ul>
<li>重写<code>layerClass</code>方法即可</li>
</ul>


<pre><code class="swift">override class var layerClass: Swift.AnyClass {
        get {
            return CAGradientLayer.self
        }
    }
</code></pre>

<h3>4. CALayer subclasses</h3>

<!--- CAEmitterLayer

Used to implement a Core Animation–based particle emitter system. The emitter layer object controls the generation of the particles and their origin.-->


<h4>4.1 CAGradientLayer</h4>

<ul>
<li>绘制渐变色的Layer</li>
</ul>


<h5>property</h5>

<ul>
<li><code>var colors: [Any]? { get set }</code>

<ul>
<li>数组元素为<code>CGColorRef</code> 才能生效</li>
</ul>
</li>
<li><code>var locations: [NSNumber]? { get set }</code>

<ul>
<li>数组元素为0到1 增长数， 表示颜色停止的区间</li>
<li>数目和<code>colors</code>相同</li>
</ul>
</li>
<li><code>var startPoint: CGPoint { get set }</code>

<ul>
<li>unit 坐标系统属性，渐变色开始位置</li>
<li>默认值是(0.5,0)</li>
</ul>
</li>
<li><code>var endPoint: CGPoint { get set }</code>

<ul>
<li>unit 坐标系统属性，渐变色结束位置</li>
<li>默认值是(0.5,1)</li>
</ul>
</li>
</ul>


<p>创建一个渐变色Layer</p>

<pre><code class="swift"> class MTGradientView: UIView {
    override class var layerClass: Swift.AnyClass  {
        return CAGradientLayer.self
    }

    override init(frame: CGRect) {
        super.init(frame: frame)
        self.setupLayer()
    }

    fileprivate func setupLayer() {
        gradientLayer?.colors = [UIColor.red.cgColor, UIColor.yellow.cgColor]
        gradientLayer?.locations = [0.5,1]
        gradientLayer?.startPoint = .zero
        gradientLayer?.endPoint = CGPoint(x: 1, y: 1)
    }

 }
</code></pre>

<!--
- CAMetalLayer

Used to set up and vend drawable textures for rendering layer content using Metal.

- CAEAGLLayer/CAOpenGLLayer

Used to set up the backing store and context for rendering layer content using OpenGL ES (iOS) or OpenGL (OS X).

- CAReplicatorLayer

Used when you want to make copies of one or more sublayers automatically. The replicator makes the copies for you and uses the properties you specify to alter the appearance or attributes of the copies.

- CAScrollLayer

Used to manage a large scrollable area composed of multiple sublayers.

- CAShapeLayer

Used to draw a cubic Bezier spline. Shape layers are advantageous for drawing path-based shapes because they always result in a crisp path, as opposed to a path you draw into a layer’s backing store, which would not look as good when scaled. However, the crisp results do involve rendering the shape on the main thread and caching the results.

- CATextLayer

Used to render a plain or attributed string of text.

- CATiledLayer

Used to manage a large image that can be divided into smaller tiles and rendered individually with support for zooming in and out of the content.

- CATransformLayer

Used to render a true 3D layer hierarchy, rather than the flattened layer hierarchy implemented by other layer classes.

- QCCompositionLayer

Used to render a Quartz Composer composition. (OS X only)
-->


<h4>4.2 设置Layer content</h4>

<p>设置Lyaer的content，三种方法</p>

<h5>4.2.1 给layer的<code>contents</code>属性，设置图片（适用于内容几乎不会或者很少改变</h5>

<ul>
<li><code>var contents: Any? { get set }</code> 使用<code>CGImage</code></li>
<li>赋值这个属性后，layer就会使用这个图片，而不会生成自己的<code>backing store</code></li>
<li>和UIView绑定的layer，最后不要单独设置这个属性</li>
</ul>


<h5>4.2.2 给layer设置<code>delegate</code>,让委托去绘制内容</h5>

<ul>
<li><code>UIView</code>底层的layer，自动和UIView设置了委托关系</li>
<li><p><code>weak var delegate: CALayerDelegate? { get set }</code></p></li>
<li><p><code>func display(_ layer: CALayer)</code></p>

<ul>
<li>当layer被标记为content需要reload是，例如在<code>setNeedsDisplay</code> 后会调用到该方法</li>
<li>在该方法中，一般通过设置layer的contens属性
<code>swift
func display(_ layer: CALayer) {
 if let image = self.loadImageFromBundle() {
     layer.bounds = CGRect(x: 0, y: 0, width: image.width, height: image.height)
     layer.contents = image
 }
}
</code></li>
</ul>
</li>
<li><code>func draw(_ layer: CALayer, in ctx: CGContext)</code>

<ul>
<li>当layer被标记为content需要reload是，例如在<code>setNeedsDisplay</code> 后会调用到该方法</li>
<li>如果委托实现了<code>display(_ :)</code>，该方法不会被调用</li>
</ul>
</li>
<li><code>func layerWillDraw(_ layer: CALayer)</code>

<ul>
<li>在绘制回调<code>draw(_ , in ctx:)</code> 之前被调用</li>
</ul>
</li>
</ul>


<pre><code class="swift">func draw(_ layer: CALayer, in ctx: CGContext) {
    let path = CGMutablePath()

    path.move(to: .zero)
    path.addRect(CGRect(x: 0, y: 0, width: 100, height: 100))

    ctx.setLineWidth(5.0)
    ctx.setStrokeColor(UIColor.red.cgColor)
    ctx.addPath(path)

    ctx.strokePath()
}

func layerWillDraw(_ layer: CALayer) {
    //called before draw(_ , in ctx:) 
}
</code></pre>

<ul>
<li><p><code>func layoutSublayers(of layer: CALayer)</code></p>

<ul>
<li>当layer的<code>bounds</code>改变时，需要重新对子layer进行布局</li>
</ul>
</li>
<li><p><code>func action(for layer: CALayer, forKey event: String) -&gt; CAAction?</code></p></li>
</ul>


<pre><code>func action(for layer: CALayer, forKey event: String) -&gt; CAAction? {
    guard event == "moveRight" else {
        return nil
    }

    let animation = CABasicAnimation()
    animation.valueFunction = CAValueFunction.init(name: kCAValueFunctionTranslateX)
    animation.fromValue = 1
    animation.toValue = 300
    animation.duration = 2

    return animation
}

// 外界调用
fileprivate func moveLayerToRight() {
    guard let action = startLayer.action(forKey: "moveRight") else {
        return
    }

    action.run(forKey: "transform", object: startLayer, arguments: nil)
}
</code></pre>

<h5>4.2.3 定义layer的子类，重写绘制的方法</h5>

<ul>
<li><code>func display()</code>

<ul>
<li>该方法的默认实现是，若当前layer有delegate，会去调用delegate 的 <code>func display(_ layer: CALayer)</code> 方法，若delegate，没有实现这个方法，这个方法，创建back store，然后调用layer的<code>func draw(in ctx: CGContext)</code></li>
<li>当layer被标记为content需要reload是，例如在<code>setNeedsDisplay</code> 后会调用到该方法</li>
<li>在该方法中，一般通过设置layer的contens属性</li>
</ul>
</li>
<li><code>func draw(in ctx: CGContext)</code>

<ul>
<li>绘制</li>
</ul>
</li>
</ul>


<h3>5. Contents Property</h3>

<ul>
<li><p>position-based gravity constants</p>

<p>  <img class="<a" src="href="https://github.com/engili/engili.github.io/raw/master/images/layer_contentsgravity1_2x.png">https://github.com/engili/engili.github.io/raw/master/images/layer_contentsgravity1_2x.png</a>" width="547"></p></li>
<li><p>scalling-based gravity constatns</p>

<p>  <img class="<a" src="href="https://github.com/engili/engili.github.io/raw/master/images/positioningmask_2x.png">https://github.com/engili/engili.github.io/raw/master/images/positioningmask_2x.png</a>" width="472" height="255"></p></li>
</ul>


<h3>6. 定义Layer其他外观</h3>

<ul>
<li><code>background</code> 位于contents image 下</li>
<li><code>border</code> 位于contens image 上</li>
</ul>


<h3>7. layer Hierarchy</h3>

<ul>
<li>将layer添加到layer Hierarchy后，一定要设置layer的<code>bounds</code>和<code>position</code>,Core Animation 默认设置layer的长宽为0，layer的<code>position</code>为（0，0）</li>
<li>尽量使用整数设置Layer的长和宽</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keyboards 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/04/01/keyboards-notes/"/>
    <updated>2018-04-01T20:13:05+08:00</updated>
    <id>http://engili.github.io/blog/2018/04/01/keyboards-notes</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Notification</h2>

<ul>
<li>键盘显示(前/后)发送的通知

<ul>
<li>UIKeyboardWillShowNotification</li>
<li>UIKeyboardDidShowNotification</li>
</ul>
</li>
<li>键盘消失(前/后)发送的通知

<ul>
<li>UIKeyboardWillHideNotification</li>
<li>UIKeyboardDidHideNotification</li>
</ul>
</li>
<li>键盘frame改变（前/后）的通知

<ul>
<li>UIKeyboardWillChangeFrameNotification</li>
<li>UIKeyboardDidChangeFrameNotification</li>
</ul>
</li>
</ul>


<h4>键盘弹起通知顺序</h4>

<ol>
<li>UIKeyboardWillChangeFrameNotification</li>
<li>UIKeyboardWillShowNotification</li>
<li>UIKeyboardDidChangeFrameNotification</li>
<li>UIKeyboardDidShowNotification</li>
</ol>


<h4>键盘收起通知顺序</h4>

<ol>
<li>UIKeyboardWillChangeFrameNotification</li>
<li>UIKeyboardWillHideNotification</li>
<li>UIKeyboardDidChangeFrameNotification</li>
<li>UIKeyboardDidHideNotification</li>
</ol>


<h4>切换键盘通知顺序</h4>

<ol>
<li>UIKeyboardWillChangeFrameNotification</li>
<li>UIKeyboardWillShowNotification</li>
<li>UIKeyboardDidChangeFrameNotification</li>
<li>UIKeyboardDidShowNotification</li>
</ol>


<p>这些通知收到的duration 一般为0。</p>

<h3>UserInfo</h3>

<p>通知的notification object 为nil，通知信息都在<code>userInfo</code>中</p>

<ul>
<li>UIKeyboardAnimationCurveUserInfoKey

<ul>
<li>包含<code>NSNumber</code>包装的<code>UIViewAnimationCurve</code>，获取键盘动画的时间函数</li>
<li>测试的时候，取到的值为7，不能转换成任何定义好的的时间函数（迷&hellip;）</li>
</ul>
</li>
<li>UIKeyboardAnimationDurationUserInfoKey

<ul>
<li>包含<code>NSNumber</code>包装的<code>double</code>,获取键盘动画时间</li>
</ul>
</li>
<li>UIKeyboardIsLocalUserInfoKey

<ul>
<li>包含<code>NSNumber</code>包装的<code>Bool</code>,获取当前键盘是不是App调起的，一般用于iPad等多窗口下的应用开发</li>
</ul>
</li>
<li>UIKeyboardFrameBeginUserInfoKey

<ul>
<li>包含<code>NSValue</code>包装的<code>CGRect</code>，获取键盘开始的frame在屏幕坐标系下，frame值和设备方向有关</li>
</ul>
</li>
<li>UIKeyboardFrameEndUserInfoKey

<ul>
<li>包含<code>NSValue</code>包装的<code>CGRect</code>，获取键盘结束的frame在屏幕坐标系下，frame值和设备方向有关</li>
<li>一般使用这个key值对应frame的size</li>
</ul>
</li>
</ul>


<h4>注：</h4>

<ul>
<li>只应该使用<code>UIKeyboardFrameBeginUserInfoKey</code>和<code>UIKeyboardFrameEndUserInfoKey</code>中的size信息，因为键盘在动画，orgign可能会随时改动。</li>
<li>因为键盘的高度总会改变，一般应该使用<code>UIKeyboardFrameEndUserInfoKey</code>中的size信息

<ul>
<li>实际开发中，遇到过使用origin，在屏幕旋转成横屏，又旋转回竖屏的时候，拿到的origin就改变了的问题，所以一般还是使用size属性就好</li>
</ul>
</li>
</ul>


<h3>Demo</h3>

<h4>实现一个位于底部的文本框，可以跟随键盘弹出和收起</h4>

<h6>监听通知</h6>

<pre><code class="swift 监听UIKeyboardWillShow 和 UIKeyboardWillHide ">fileprivate func registerNotification() {
    NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(_:)), name: NSNotification.Name.UIKeyboardWillShow, object: nil)
    NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)), name: NSNotification.Name.UIKeyboardWillHide, object: nil)
}
</code></pre>

<h5>UIKeyboardWillShow</h5>

<pre><code class="swift UIKeyboardWillShow进行弹起，或者键盘高度改变动画">    @objc fileprivate func keyboardWillShow(_ notification : Notification) {
        let duration = (notification.userInfo?[UIKeyboardAnimationDurationUserInfoKey] as? NSNumber)?.doubleValue ?? 0
        if let endFrame = (notification.userInfo?[UIKeyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue {
            let height = endFrame.height
            UIView.animate(withDuration: duration, delay: 0.0, options: [.beginFromCurrentState], animations: { [weak self] in
                //到底部的约束为键盘高度
                self?.bottomAlignConstraint.constant = height
                self?.view.layoutIfNeeded()
            }, completion: nil)
        }
    }
</code></pre>

<h4>UIKeyboardWillHide</h4>

<pre><code class="swift 键盘收起动画">    @objc fileprivate func keyboardWillHide(_ notification : Notification) {
        let duration = (notification.userInfo?[UIKeyboardAnimationDurationUserInfoKey] as? NSNumber)?.doubleValue ?? 0
        UIView.animate(withDuration: duration, delay: 0.0, options: [.beginFromCurrentState], animations: { [weak self] in
            //到底部的约束为0
            self?.bottomAlignConstraint.constant = 0
            self?.view.layoutIfNeeded()
        }, completion: nil)
    }
</code></pre>

<h2>相关Demo地址</h2>

<p><a href="https://github.com/engili/Blog-Demos/tree/master/iOS/UIKit/Keyboard/MTKeyboardNotificationDemo">Demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIKit Animations 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/03/24/uikit-animations-note/"/>
    <updated>2018-03-24T21:33:06+08:00</updated>
    <id>http://engili.github.io/blog/2018/03/24/uikit-animations-note</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>1. UIView 可动画属性 (Animatable Property)</h3>

<ul>
<li>frame

<ul>
<li>当<code>transform</code> 属性不为<code>identity</code>时，<code>frame</code>是未定义的，使用<code>bounds</code>或<code>center</code>做动画</li>
</ul>
</li>
<li>bounds</li>
<li>center</li>
<li>transform</li>
<li>alpha</li>
<li>backgroundColor</li>
<li><del>contentStretch</del> (iOS 7.0弃用）

<ul>
<li><del>Modify this property to change the way the view’s contents are stretched to fill the available space.</del></li>
</ul>
</li>
</ul>


<h5>注：改变某个正在进行的动画的属性的值，并不会打断动画，而是动画继续执行，并且最终态到你设置的那个值</h5>

<h3>2. Animations Block-Based Methods</h3>

<pre><code class="swift">class func animate(withDuration duration: TimeInterval, animations: @escaping () -&gt; Void)
</code></pre>

<ul>
<li>这个方法使用<code>curveEaseInOut</code>和<code>transitionNone</code>选项，动画期间动画的View不响应用户交互</li>
</ul>


<pre><code class="swift">class func animate(withDuration duration: TimeInterval, animations: @escaping () -&gt; Void, completion: ((Bool) -&gt; Void)? = nil)
</code></pre>

<ul>
<li><code>completion</code>,如果<code>duration</code>值是0，block会在下一个<code>runloop cycle</code>被调用</li>
</ul>


<pre><code class="swift">class func animate(withDuration duration: TimeInterval, delay: TimeInterval, options: UIViewAnimationOptions = [], animations: @escaping () -&gt; Void, completion: ((Bool) -&gt; Void)? = nil)
</code></pre>

<ul>
<li><code>options</code> 可以设置一个或者多个，以数组的形式</li>
</ul>


<h4>2.1 UIViewAnimationOptions</h4>

<h5>2.1.1 常规属性（可以设置多个）</h5>

<ul>
<li>layoutSubviews

<ul>
<li>layout子View，让他们随父view一起动画</li>
</ul>
</li>
</ul>


<pre><code class="swift 必须重写view的LayoutSubViews方法">//  MTAnimateView.swift
class MTAnimateView: UIView {
    var subview: UIView!
    override func layoutSubviews() {
        let bounds = self.bounds
        subview.frame = CGRect(x: 0, y: 0, width: bounds.width / 2, height: bounds.height / 2)
    }
}

//UIViewController.swift
class ViewController: UIViewController {
    var redView: MTAnimateView!
    //动画block 扩大bounds，长宽各100，不带`layoutSubviews` 动画效果就很奇怪
    func animateWithLayoutSubViews() {
        let orginBounds = redView.bounds
        UIView.animate(withDuration: 1.0, delay: 0.0, options: .layoutSubviews, animations: {
            self.redView.bounds = CGRect(x: orginBounds.origin.x, y: orginBounds.origin.y, width: orginBounds.width + 100, height: orginBounds.height + 100)
        }) { (_) in
            self.redView.bounds = orginBounds
        }
    }

}
</code></pre>

<ul>
<li>allowUserInteraction

<ul>
<li>响应动画时的用户交互</li>
</ul>
</li>
<li><p>beginFromCurrentState</p>

<blockquote><p>If this key is not present, all in-flight animations are allowed to finish before the new animation is started. If another animation is not in flight, this key has no effect.</p></blockquote></li>
<li><p>`repeat`</p>

<ul>
<li>重复动画</li>
</ul>
</li>
</ul>


<pre><code class="swift">    UIView.animate(withDuration: 0.5, delay: 0.0, options: .repeat, animations: {
                //重复执行3次
                UIView.setAnimationRepeatCount(3)
                ...
            }, completion: nil)
</code></pre>

<ul>
<li>autoreverse

<ul>
<li>与<code>repeat</code>配合使用，动画能回溯</li>
</ul>
</li>
<li>overrideInheritedDuration

<ul>
<li>忽略嵌套动画的时间,使用自己设置的<code>duration</code></li>
</ul>
</li>
<li>overrideInheritedCurve

<ul>
<li>忽略嵌套动画的时间曲线，使用自己设置的时间曲线</li>
</ul>
</li>
</ul>


<pre><code class="swift 嵌套动画">    UIView.animate(withDuration: 2.0, delay: 0.0, options: .curveEaseIn, animations: {
            self.redView.center = redViewNewCenter
            UIView.animate(withDuration: 0.5, delay: 0.0, options: [.curveEaseOut, .overrideInheritedDuration, .overrideInheritedCurve], animations: {
                self.blueView.center = blueViewNewCenter
            }, completion: { (_) in
                self.blueView.center = blueViewOriginalCenter
            })
        }) { (_) in
            self.redView.center = redViewOriginalCenter
    }
</code></pre>

<ul>
<li>allowAnimatedContent

<ul>
<li>动画的时候，重绘View，没设置这个选项的时候，动画都是使用的截图</li>
</ul>
</li>
<li>showHideTransitionViews

<ul>
<li>用于转场动画</li>
</ul>
</li>
</ul>


<blockquote><p>When present, this key causes views to be hidden or shown (instead of removed or added) when performing a view transition. Both views must already be present in the parent view’s hierarchy when using this key. If this key is not present, the to-view in a transition is added to, and the from-view is removed from, the parent view’s list of subviews.</p></blockquote>

<ul>
<li>overrideInheritedOptions</li>
</ul>


<h5>2.1.2 速度属性 （可以设置一个）</h5>

<ul>
<li>curveEaseInOut

<ul>
<li>开始慢，中间加速，结尾慢</li>
</ul>
</li>
<li>curveEaseIn

<ul>
<li>开始慢，一直加速</li>
</ul>
</li>
<li>curveEaseOut

<ul>
<li>开始快，一直减速</li>
</ul>
</li>
<li>curveLinear

<ul>
<li>均匀的</li>
</ul>
</li>
</ul>


<h5>2.1.3 转场动画属性 （可以设置一个）</h5>

<ul>
<li>transitionFlipFromLeft</li>
<li>transitionFlipFromRight</li>
<li>transitionCurlUp</li>
<li>transitionCurlDown</li>
<li>transitionCrossDissolve</li>
<li>transitionFlipFromTop</li>
<li>transitionFlipFromBottom</li>
<li>preferredFramesPerSecond30</li>
<li>preferredFramesPerSecond60</li>
</ul>


<h3>3. 嵌套动画</h3>

<p>嵌套动画，是嵌套在其他动画block中的动画，他开始动画的时间和他父动画一样，并且继承父动画的时间，时间曲线和其他动画配置。
可以通过<code>overrideInheritedDuration</code>、<code>overrideInheritedCurve</code> 来使用自己的配置做动画</p>

<h3>4. 转场动画 (动画效果比较浮夸，用的较少)</h3>

<pre><code class="swift">class func transition(with view: UIView, duration: TimeInterval, options: UIViewAnimationOptions = [], animations: (() -&gt; Void)?, completion: ((Bool) -&gt; Void)? = nil)
</code></pre>

<ul>
<li>在<code>view</code>中进行转场动画</li>
<li>在<code>animations</code>中可以add、remove、hide、show view，如果想要其他动画效果，需要配置<code>allowAnimatedContent</code></li>
</ul>


<pre><code class="swift 示例">UIView.transition(with: redView, duration: 1.0, options: .transitionFlipFromLeft, animations: {
            self.greenView.isHidden = false
            self.blueView.isHidden = true
        }, completion: nil)
</code></pre>

<pre><code class="swift">class func transition(from fromView: UIView, to toView: UIView, duration: TimeInterval, options: UIViewAnimationOptions = [], completion: ((Bool) -&gt; Void)? = nil)
</code></pre>

<ul>
<li>这个方法，从<code>fromView</code>转场到<code>toView</code></li>
<li>系统实现是直接从视图层级中移除，可以使用 <code>showHideTransitionViews</code> 只是显示和隐藏两个view</li>
</ul>


<h3>5. UIViewPropertyAnimator</h3>

<h5>5.1.1 构造方法</h5>

<pre><code class="swift ">convenience init(duration: TimeInterval, curve: UIViewAnimationCurve, animations: (() -&gt; Void)? = nil)
</code></pre>

<ul>
<li>构造函数 创建出的animator是<code>inactive</code>状态</li>
<li>需要调用<code>startAnimation()</code>开始动画</li>
</ul>


<h5>5.1.2 添加动画</h5>

<pre><code class="swift">func addAnimations(_ animation: @escaping () -&gt; Void)
</code></pre>

<ul>
<li>可以通过这个方法，添加多个动画block</li>
<li><code>inactive</code> 状态下，添加的动画，进行时间是配置的时间，<code>active</code>状态下，添加的动画，进行的时间，是animtor剩余的时间</li>
<li><code>stopped</code>状态下，添加动画，会报错</li>
</ul>


<h5>5.1.3 添加动画结束回调</h5>

<pre><code class="swift"> func addCompletion(_ completion: @escaping (UIViewAnimatingPosition) -&gt; Void)
</code></pre>

<ul>
<li>动画正常结束时，执行回调</li>
<li>调用<code>stopAnimation(_:)</code> 参数设置<code>true</code>,执行回调</li>
<li>调用<code>stopAnimation(_:)</code> 参数设置<code>false</code>,在<code>finishAnimation(at:)</code>调用后，执行回调</li>
</ul>


<h5>5.1.4 continueAnimation</h5>

<p>调整一个暂停动画的 时间函数 和 时间</p>

<pre><code class="swift">func continueAnimation(withTimingParameters parameters: UITimingCurveProvider?, durationFactor: CGFloat)
</code></pre>

<ul>
<li>调用该方法，需要animtor处于<code>active</code>且暂停的状态</li>
<li>当状态处于非<code>active</code>,或动画正在进行，或者 <code>isInterruptible</code>属性是false时 会报错</li>
<li><code>parameters</code>: 新的时间函数，但是为了避免，动画有跳动的现象，一般改变时间函数后，会有一定的过渡效果</li>
<li><code>durationFactor</code>: 时间乘法因子，和原有的时间，相乘，获取最终的时间</li>
<li>当这次动画结束后，才会重写aniator的<code>timing</code>和<code>duration</code>属性</li>
</ul>


<h4>5.2 UIViewAnimating</h4>

<h5>5.2.1 UIViewAnimatingState</h5>

<ul>
<li>inactive

<ul>
<li>构造方法创建的animator初始状态</li>
</ul>
</li>
<li>active

<ul>
<li>当调用<code>startAnimation()</code> 或 <code>pauseAnimation()</code> 后，处于这个状态</li>
</ul>
</li>
<li>stopped

<ul>
<li>动画自然结束，或者调用<code>stopAnimation(_:)</code></li>
<li>调用<code>stopAnimation(_:)</code>,会让动画停留在当前值，而不是最终动画设定的值</li>
</ul>
</li>
</ul>


<p><img class="<a" src="href="https://github.com/engili/engili.github.io/raw/master/images/animation_states_2x.png">https://github.com/engili/engili.github.io/raw/master/images/animation_states_2x.png</a>" width="373" height="236"></p>

<h5>5.2.2 UIViewAnimatingPosition</h5>

<ul>
<li>end</li>
<li>start</li>
<li>current</li>
</ul>


<h5>5.2.3 动画状态改变</h5>

<ul>
<li><code>startAnimation()</code>

<ul>
<li>开始一个动画，或者恢复一个暂停的动画</li>
<li><code>stopped</code>状态的动画，不能调用该方法</li>
</ul>
</li>
<li><code>pauseAnimation()</code>

<ul>
<li>暂停动画</li>
<li><code>inactive</code>动画调用后，转为<code>active状态</code>，并且动画处于暂停状态</li>
</ul>
</li>
<li><code>stopAnimation(_:)</code> 使动画，在当前状态停止</li>
</ul>


<pre><code class="swift">func stopAnimation(_ withoutFinishing: Bool)
</code></pre>

<ul>
<li><p><code>withoutFinishing</code>:</p>

<ul>
<li>设置为<code>true</code>,animator进入<code>inactive</code>状态</li>
<li>设置为<code>false</code>,animator进入<code>stopped</code>状态，之后可以进行一些其他操作，</li>
</ul>
</li>
<li><p><code>finishAnimation(at:)</code>使得动画结束，animator回到<code>inactive</code></p></li>
</ul>


<h5>5.2.4 可交互动画</h5>

<ul>
<li><code>fractionComplete</code>

<ul>
<li>动画完成百分比</li>
<li>通过修改这个值，可以使animator进行到相应的过程</li>
</ul>
</li>
</ul>


<pre><code class="swift 一个可交互动画例子">
@objc fileprivate func handleInterruptableGesture(_ gesture: UIPanGestureRecognizer) {
    let offset = UIScreen.main.bounds.width - 100
    switch gesture.state {
    case .began:
        if interruptableAnimator == nil {
            interruptableAnimator = UIViewPropertyAnimator(duration: 3.0, curve: .easeOut, animations: {
                self.interruptableAnimtionView.frame = self.interruptableAnimtionView.frame.offsetBy(dx: offset, dy: 0)
            })
        }
        interruptableAnimator!.pauseAnimation()
        progressWhenInterrupted = interruptableAnimator!.fractionComplete
    case .changed:
        let translation = gesture.translation(in: self.interruptableAnimtionView)
        interruptableAnimator!.fractionComplete = (translation.x / offset) + progressWhenInterrupted

    case .ended, .cancelled:
        let timing = UICubicTimingParameters(animationCurve: .easeOut)
        interruptableAnimator!.continueAnimation(withTimingParameters: timing, durationFactor: 0)
    default:
        break
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreData 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2017/08/20/coredata-note/"/>
    <updated>2017-08-20T18:41:45+08:00</updated>
    <id>http://engili.github.io/blog/2017/08/20/coredata-note</id>
    <content type="html"><![CDATA[<!--more-->


<h2>1. Core Data Stack</h2>

<h3>iOS 10 以前创建CoreDataStack</h3>

<hr />

<h4>1 Data Model</h4>

<p>Data Model 是Xcode提供的一个可视化Model 编辑器，可以创建实例，定义实例属性，定义实例之间的关系，以及创建一些常用的FetchRequst</p>

<h5>1.1 新建DataModel 文件</h5>

<p><img class="<a" src="href="https://github.com/engili/engili.github.io/raw/master/images/coredata-notes-01.png">https://github.com/engili/engili.github.io/raw/master/images/coredata-notes-01.png</a>" width="547"></p>

<h5>1.2 添加实例&amp;定义属性</h5>

<p><img class="<a" src="href="https://github.com/engili/engili.github.io/raw/master/images/coredata-notes-02.png">https://github.com/engili/engili.github.io/raw/master/images/coredata-notes-02.png</a>" width="547"></p>

<h6>1.21 属性类型（Attribute Type）</h6>

<ul>
<li>Integer16 Integer32 Integer64</li>
<li>Decimal Float Double</li>
<li>String</li>
<li>Boolean</li>
<li>Date</li>
<li>Binary Data</li>
<li>Transformable</li>
</ul>


<p>其中，<code>Binary Data</code> 为二进制数据，在Xcode右侧Model Inspector 中，有一个可以设置<code>Allows External Storage</code>的选项，CoreData会智能选择是存储文件的二进制数据，还是存储文件URL</p>

<p><code>Transformable</code> 可以为任意遵循<code>NSCoding</code>协议的对象类型</p>

<h5>1.3 添加关系（relationShip）</h5>

<ul>
<li>to one （一对一）</li>
<li>to Manay （一对多）</li>
</ul>


<p>这里再定义一个实例，主人（master），设定主人和狗子的关系为一对多，关系图如下：</p>

<p><img class="<a" src="href="https://github.com/engili/engili.github.io/raw/master/images/coredata-notes-03.png">https://github.com/engili/engili.github.io/raw/master/images/coredata-notes-03.png</a>" width="547"></p>

<h4>2 CoreDataStack</h4>

<p>CoreDataStck，是自定义的一个CoreData 的栈对象，为一个单例，可以通过它，初始化项目的CoreData，以及获取到Context，对数据库进行增删改查等操作</p>

<h5>2.1 单例</h5>

<pre><code class="obj-c">//  CoreDataStack.h

#import &lt;Foundation/Foundation.h&gt;
#import &lt;CoreData/CoreData.h&gt;

@interface CoreDataStack : NSObject

+ (instancetype)sharedInstance;

@end
</code></pre>

<pre><code class="obj-c">//  CoreDataStack.m

#import "CoreDataStack.h"

@implementation CoreDataStack

+ (instancetype)sharedInstance {
    static CoreDataStack *stack;
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        stack = [[CoreDataStack alloc] init];
    });

    return stack;
}
@end
</code></pre>

<h4>3 NSManagedModel</h4>

<blockquote><p>The NSManagedObjectModel represents each object type in your app&rsquo;s data model, the properties they can have, and the relationship between them.</p></blockquote>

<pre><code>//  CoreDataStack.m

@interface CoreDataStack ()

@property (nonatomic, strong) NSManagedObjectModel *managedModel;

@end

......
- (NSManagedObjectModel *)managedModel {
    if (!_managedModel) {
        NSURL *momdURL = [[NSBundle mainBundle]URLForResource:@"Model" withExtension:@"momd"];
        _managedModel = [[NSManagedObjectModel alloc] initWithContentsOfURL:momdURL];
    }
    return _managedModel;
}
</code></pre>

<p><code>NSManagedObjectModel</code>通过Xcode创建的<code>DataModel</code>文件初始化，DataModel文件编译后的后缀为<code>momd</code>。</p>

<h4>4 NSPersistentStoreCoordinator</h4>

<h5>4.1 NSpersistentStore</h5>

<h6>atomic vs nonatomic</h6>

<blockquote><p>An atomic persistent store needs to be completely deserialized and loaded into memory before you can make any read or write operations. In contrast, a non- atomic persistent store can load chunks of itself onto memory as needed.</p></blockquote>

<h6>type</h6>

<ul>
<li>NSSQLiteStoreType (nonatomic)</li>
<li>NSXMLStoreType (atomic)</li>
<li>NSBinaryStoreType (atomic)</li>
<li>NSInMemoryStoreType (atomic)</li>
</ul>


<h4>4.2 NSPersistentStoreCoordinator</h4>

<blockquote><p>the bridge between the managed object model and the persistent store</p></blockquote>

<ul>
<li>通过<code>managed object model</code>初始化</li>
<li>通过<code>addPersistentStoreWithType:configuration:URL:options:error:</code> 添加<code>persistent store</code></li>
</ul>


<pre><code class="obj-c">//  CoreDataStack.m

@interface CoreDataStack ()

@property (nonatomic, strong) NSPersistentStoreCoordinator *psc;

@end

......

- (NSPersistentStoreCoordinator *)psc {
    if (!_psc) {
        _psc = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:self.managedModel];

        NSURL *URL = [[self documentURL] URLByAppendingPathComponent:@"Model.sqlite"];
        NSError *error;
        if (![_psc addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:URL options:nil error:&amp;error]) {
            NSLog(@"addPersistentStoreWithType Error: %@",[error localizedDescription]);
        }
    }
    return _psc;
}

- (NSURL *)documentURL {
    return [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] firstObject];
}
</code></pre>

<h4>5 NSManagedObjectContext</h4>

<p>Context是唯一暴露给外界，供外界使用的接口</p>

<blockquote><ul>
<li>context an in-memory scratchpad for managed objects.</li>
<li>any change you make won&rsquo;t affect the underlying data on disk until you call <code>-save:</code> of context</li>
<li>context manages the lifecycle of the objects that it creates or fetches.</li>
<li>A managed object cannot exist without an associated context.</li>
<li>once a managed object has associated with a particular context, it will remain associated with the same context for the duration of its lifecycle.</li>
<li>context and managed object is not thread safe</li>
</ul>
</blockquote>

<pre><code class="obj-c">//  CoreDataStack.h

@interface CoreDataStack : NSObject

@property (nonatomic, strong, readonly) NSManagedObjectContext *managedContext;

@end
</code></pre>

<pre><code class="obj-c">//  CoreDataStack.m

@interface CoreDataStack ()

@property (nonatomic, strong, readwrite) NSManagedObjectContext *managedContext;

@end

- (NSManagedObjectContext *)managedContext {
    if (!_managedContext) {
        _managedContext = [[NSManagedObjectContext alloc] initWithConcurrencyType:NSMainQueueConcurrencyType];
        _managedContext.persistentStoreCoordinator = self.psc;
    }
    return _managedContext;
}
</code></pre>

<h4>6 Save Context</h4>

<pre><code class="obj-c">- (void)saveContext {
    NSError *error;
    if ([self.managedContext hasChanges] &amp;&amp; ![self.managedContext save:&amp;error]) {
        NSLog(@"NSManagedObjectContext Save Error: %@",[error localizedDescription]);
    }
}
</code></pre>

<h3>iOS 10 以后创建CoreDataStack</h3>

<hr />

<p>iOS 10 以后，苹果系统为我们封装了一个CoreData Stack 的类，叫<code>NSPersistentContainer</code>,可以通过它的属性<code>viewContext</code>获取到<code>NSManagedObjectContext</code></p>

<pre><code class="obj-c">@property (readonly, strong) NSPersistentContainer *persistentContainer;

- (NSPersistentContainer *)persistentContainer {
    // The persistent container for the application. This implementation creates and returns a container, having loaded the store for the application to it.
    @synchronized (self) {
        if (_persistentContainer == nil) {
            _persistentContainer = [[NSPersistentContainer alloc] initWithName:@"testCoreData"];
            [_persistentContainer loadPersistentStoresWithCompletionHandler:^(NSPersistentStoreDescription *storeDescription, NSError *error) {
                if (error != nil) {
                    // Replace this implementation with code to handle the error appropriately.
                    // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.

                    /*
                     Typical reasons for an error here include:
                     * The parent directory does not exist, cannot be created, or disallows writing.
                     * The persistent store is not accessible, due to permissions or data protection when the device is locked.
                     * The device is out of space.
                     * The store could not be migrated to the current model version.
                     Check the error message to determine what the actual problem was.
                    */
                    NSLog(@"Unresolved error %@, %@", error, error.userInfo);
                    abort();
                }
            }];
        }
    }

    return _persistentContainer;
}

- (void)saveContext {
    NSManagedObjectContext *context = self.persistentContainer.viewContext;
    NSError *error = nil;
    if ([context hasChanges] &amp;&amp; ![context save:&amp;error]) {
        // Replace this implementation with code to handle the error appropriately.
        // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
        NSLog(@"Unresolved error %@, %@", error, error.userInfo);
        abort();
    }
}
</code></pre>

<h2>2. 创建NSManagedObject对象</h2>

<p>可视化Data Model文件在程序中，对应了<code>NSManagedModel</code>对象，这些<code>Entity</code>在程序中，所对应的对象就是<code>NSManagedObject</code> (当然其实并不完全对等，可以先这么理解)</p>

<h3>Document</h3>

<blockquote><p>NSManagedObject is a generic class that implements all the basic behavior required of a Core Data model object. It is not possible to use instances of direct subclasses of NSObject (or any other class not inheriting from NSManagedObject) with a managed object context. You may create custom subclasses of NSManagedObject, although this is not always required. If no custom logic is needed, a complete Object graph can be formed with NSManagedObject instances.</p></blockquote>

<p>这里大概有三个要点</p>

<ul>
<li>NSManagedObject 代表了Data Model中的对象</li>
<li>NSManagedObject 需要和 NSManagedObjectContext 结合使用才有意义</li>
<li>NSManagedObject 满足所有你自定义的model 对象需求，通过KVC 去访问相应的属性</li>
</ul>


<h3>生成NSManagedObject子类</h3>

<p>虽然通过KVC就可以访问NSManagedObject所有的属性，但这样使用起来不是很方便。</p>

<p>在Xcode Data Model Editor 中选中你要创建NSManagedObject子类的实例，在右侧<code>Data Model Inspector</code>中选择<code>Codegen</code></p>

<p><img class="<a" src="href="https://github.com/engili/engili.github.io/raw/master/images/coredata-notes-04.png">https://github.com/engili/engili.github.io/raw/master/images/coredata-notes-04.png</a>" width="547"></p>

<ul>
<li>Manual/None</li>
<li>Category/Extension.</li>
<li>Class Definition</li>
</ul>


<blockquote><p>Manual/None is the default, and previous behavior; in this case you should implement your own subclass or use NSManagedObject.</p></blockquote>

<p>这个是iOS10以前的默认行为，需要我们手动通过Xcode <code>Editor-&gt; Create NSManagedObject SubClass...</code> 生成<code>ClassName+CoreDataClass</code> 文件以及 <code>ClassName+CoreDataGeneratedProperties</code> 其中前者，是类的定义，以及类行为定义，后者通过category 定义了类的属性（注：Objective-C中Category定义属性不支持生成成员变量，但可以生成get set 方法，CoreData属性通过@dynamic修饰，表示，运行时生成 get set 方法）</p>

<p>当每次修改，data model的时候，重新通过以上方法，生成NSManagedObject对象，系统只会覆盖<code>ClassName+CoreDataGeneratedProperties</code>文件，而不会修改<code>ClassName+CoreDataClass</code> 文件。</p>

<blockquote><p>Category/Extension generates a class extension in a file named like ClassName+CoreDataGeneratedProperties. You need to declare/implement the main class (if in Obj-C, via a header the extension can import named ClassName.h).</p></blockquote>

<p>一般情况下，因为我们不需要修改属性Category的定义，而只需要修改类行为的定义，所以这个选项，就直接不对开发者暴露Category 文件，当你修改了DataModel的时候，就可以自动同步最新的代码</p>

<blockquote><p>Class Definition generates subclass files named like ClassName+CoreDataClass as well as the files generated for Category/Extension.</p></blockquote>

<p>当我们也不需要为<code>NSManagedObject</code>定义行为的时候，我们就可以选中这个选项，然后直接在项目里引用头文件就可以直接使用。</p>

<h3>数据库 增删改查</h3>

<h4>增</h4>

<p>增加一个数据库对象，首先，需要创建一个<code>NSEntityDescription</code>,前面说 Data Model Editor 里的实例并不完全和<code>NSManagedObject</code>对等，就是因为创建<code>NSManagedObject</code>对象，还需要entity相关的描述对象，这个对象才与实例对等。</p>

<pre><code class="obj-c">NSEntityDescription *entity = [NSEntityDescription entityForName:@"Doge" inManagedObjectContext:_context];
Doge *doge = [[Doge alloc] initWithEntity:entity insertIntoManagedObjectContext:_context];
doge.name = @"xxx";
...
...
//注意，这里并没有实际把对象存入数据库，实际存入需要调用NSManagedObjectContext 的save:方法
[_context save:nil];
</code></pre>

<h4>改</h4>

<p>直接访问<code>NSManagedObject</code>属性的set方法，就可以修改属性，同时，也只有当调用了NSManagedObjectContext 的<code>-save:</code>方法后才能存入实际的存储文件中</p>

<h4>删</h4>

<p>删除调用<code>NSManagedObjectContext</code>的<code>-deleteObject:</code>方法，然后调用<code>-save:</code>方法</p>

<pre><code class="obj-c"> Doge *doge = ...
 [_context deleteObject:doge];
 [_context save:nil]
</code></pre>

<h4>查</h4>

<h5>1. NSFetchRequest</h5>

<h6>resultType</h6>

<ul>
<li>NSManagedObjectResultType</li>
<li>NSCountResultType</li>
<li>NSDictionaryResultType</li>
<li>NSManagedObjectIDResultType</li>
</ul>


<p>其中默认属性为<code>NSManagedObjectResultType</code></p>

<h6>NSManagedObjectResultType</h6>

<p><code>NSManagedObjectResultType</code>是NSFetchRequest 的默认属性，执行查询后，数组里每个元素，就是NSFetchRequest 对应的NSManagedObject对象。</p>

<pre><code class="obj-c">    NSFetchRequest *fetchRequest =  [NSFetchRequest fetchRequestWithEntityName:@"Doge"];
    //默认就为NSManagedObjectResultType
    //fetchRequest.resultType = NSManagedObjectResultType;
    NSArray *result = [_context executeFetchRequest:fetchRequest error:nil];
    //这里数组的元素为Doge对象
</code></pre>

<h6>NSCountResultType</h6>

<p><code>NSCountResultType</code>执行查询后，返回的数组，包含一个对象，NSNmber.</p>

<pre><code class="obj-c">    NSFetchRequest *fetchRequest =  [NSFetchRequest fetchRequestWithEntityName:@"Doge"];
    fetchRequest.resultType = NSCountResultType;
    NSArray *result = [_context executeFetchRequest:fetchRequest error:nil];
    //这里数组的元素为 NSNumber ，一般数组只有一个元素
    if ([result count] &gt; 0){
        NSInteger count = [[results objectAtIndex:0] integerValue];
    }
</code></pre>

<h6>NSDictionaryResultType</h6>

<p><code>NSDictionaryResultType</code> 顾名思义，是返回一个字典，除了设置<code>fetchRequest.resultType</code>,还需要设置<code>fetchRequest.propertiesToFetch</code></p>

<h6>NSManagedObjectIDResultType</h6>

<p>返回唯一标识</p>

<blockquote><p>Prior to iOS 5, fetching by ID was popular because NSManagedObjectID is thread-safe and using it helped developers implement the thread confinement concurrency model. Now that thread confinement has been deprecated in favor of more modern concurrency models, there’s little reason to fetch by object ID anymore.</p></blockquote>

<h5>2. NSPredicate</h5>

<blockquote><p>The NSPredicate class is used to define logical conditions used to constrain a search either for a fetch or for in-memory filtering.</p></blockquote>

<p>NSFetchRequest 支持使用谓词来作为，查询筛选条件</p>

<pre><code class="obj-c">    NSFetchRequest *fetchRequest =  [NSFetchRequest fetchRequestWithEntityName:@"Doge"];
    fetchRequestWithEntityName:@"Doge"];
    fetchRequest.predicate = [NSPredicate predicateWithFormat:@"age &gt; 5"];
    NSArray *result = [_context executeFetchRequest:fetchRequest error:nil];
</code></pre>

<h5>3. NSSortDescriptor</h5>

<p>除了使用支持使用谓词，NSFetchRequest 还支持使用<code>NSSortDescriptor</code> 进行排序</p>

<pre><code class="obj-c">   NSFetchRequest *fetchRequest =  [NSFetchRequest fetchRequestWithEntityName:@"Doge"];
    NSSortDescriptor *sortDescriptor = [NSSortDescriptor sortDescriptorWithKey:@"age" ascending:YES];
    fetchRequest.sortDescriptors = @[sortDescriptor];

    NSArray *result = [_context executeFetchRequest:fetchRequest error:nil];
</code></pre>

<h5>4. NSAsynchronousFetchRequest</h5>

<p>NSFetchRequest 是同步查询的，CoreData 也提供了异步查询的类<code>NSAsynchronousFetchRequest</code>,它通过一个 block ，将数据异步返回，注意，查询方法使用的是 <code>-executeRequest:error:</code></p>

<pre><code>    NSFetchRequest *fetchRequest =  [NSFetchRequest fetchRequestWithEntityName:@"Doge"];
    NSAsynchronousFetchRequest *asyncFetchRequest = [[NSAsynchronousFetchRequest alloc] initWithFetchRequest:fetchRequest completionBlock:^(NSAsynchronousFetchResult * _Nonnull results) {
        NSLog(@"%@",results);
    }];
    [_context executeRequest:asyncFetchRequest error:nil];
</code></pre>

<h3>Demo</h3>

<h4>添加数据</h4>

<pre><code class="obj-c">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    // Override point for customization after application launch.
    [self importSeedJsonSeedIfNeeded];
    return YES;
}
- (void)importSeedJsonSeedIfNeeded {

    NSManagedObjectContext *context = [[MTCoreDataStack sharedInstance] managedContext];

    NSFetchRequest * fetchRequest = [Master fetchRequest];
    fetchRequest.resultType = NSCountResultType;

    NSError *error;
    NSArray *results = [context executeFetchRequest:fetchRequest error:&amp;error];
    if (!error) {
        if ([results count] &gt; 0) {
            NSInteger masterCount = [[results objectAtIndex:0] integerValue];
            if (masterCount &lt;= 0) {
                [self importJsonSeed];
            }
        } else {
            [self importJsonSeed];
        }

    }else {
        [self importJsonSeed];
    }

}

- (void)importJsonSeed {
    NSURL *jsonURL = [[NSBundle mainBundle] URLForResource:@"seed" withExtension:@"json"];

    NSError *error;
    NSData *jsonData = [NSData dataWithContentsOfURL:jsonURL options:0 error:&amp;error];

    if (!error) {
        NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&amp;error];
        if (!error) {

            NSManagedObjectContext *context = [[MTCoreDataStack sharedInstance] managedContext];

            NSEntityDescription *masterEntity = [NSEntityDescription entityForName:@"Master" inManagedObjectContext:context];
            NSEntityDescription *dogeEntity = [NSEntityDescription entityForName:@"Doge" inManagedObjectContext:context];

            NSDictionary *masterDict = jsonDict[@"master"];
            if (![masterDict isKindOfClass:[NSDictionary class]]) {
                return;
            }

            Master *master = [[Master alloc] initWithEntity:masterEntity insertIntoManagedObjectContext:context];
            master.name = masterDict[@"name"];
            master.age = [masterDict[@"age"] integerValue];

            NSArray *doges = jsonDict[@"doges"];

            for (NSDictionary *dogeDict in doges) {
                if (![dogeDict isKindOfClass:[NSDictionary class]]) {
                    continue;
                }
                Doge *doge = [[Doge alloc] initWithEntity:dogeEntity insertIntoManagedObjectContext:context];
                doge.name = dogeDict[@"name"];
                doge.age = [dogeDict[@"age"] integerValue];
                doge.master = master; //因为在DataModel 里设置了 inverse， 所以master 和 doge可以相互关联上
            }
            //一定要调用 save 方法，才能真正的将文件存入数据库
            [[MTCoreDataStack sharedInstance] saveContext];
        }
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
