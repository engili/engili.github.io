<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objctive-c | Lmt的博客]]></title>
  <link href="http://engili.github.io/blog/categories/objctive-c/atom.xml" rel="self"/>
  <link href="http://engili.github.io/"/>
  <updated>2018-05-22T20:35:11+08:00</updated>
  <id>http://engili.github.io/</id>
  <author>
    <name><![CDATA[limengtian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C Static定义常量和变量总结]]></title>
    <link href="http://engili.github.io/blog/2017/03/10/oc-static/"/>
    <updated>2017-03-10T20:48:13+08:00</updated>
    <id>http://engili.github.io/blog/2017/03/10/oc-static</id>
    <content type="html"><![CDATA[<!--more-->


<h3>1. <code>.m</code> 文件里定义static 常量</h3>

<pre><code class="obj-c">// .m

static const int kConstant = xxx;

@implementation ...

@end
</code></pre>

<ul>
<li>该文件里全局可见 (准确说应该是compilation unit，而不是文件)</li>
<li>外部文件不能通过<code>extern</code>引用</li>
</ul>


<h3>2. <code>.m</code> 文件里定义static 变量</h3>

<pre><code class="obj-c">// .m

static int intVar = xxx;

@implementation ...

@end

// .h
//实现类似类变量的机制
+ (int)intVar;
+ (void)setIntVar:(int)intVar;
</code></pre>

<ul>
<li>OC里没有类变量的概念，但通过静态的全局变量，可以实现类似类变量的东西

<ul>
<li>因为一般情况下，OC里的类以文件为单位，划分。通过给类添加，get 和 set的类方法，去实际操作这个全局变量，就可以实现类似类变量的机制。</li>
</ul>
</li>
<li>外部文件不能通过extern引用</li>
</ul>


<h3>3. <code>.h</code> 里定义static 常量</h3>

<pre><code class="obj-c">// .h

static const int kConstatnt = 1;
</code></pre>

<p><a href="http://stackoverflow.com/a/92641/4635964">Variable declarations in header files - static or not?</a></p>

<blockquote><p>这里static，意味着，每一个包含这个头文件的源文件里，会包含一个这个常量的拷贝，但与此同时，链接时，并不会出现符号冲定义的错误。</p></blockquote>

<ul>
<li>外部文件，可以通过引用该头文件，使用这个全局常量，但这里获得的是该常量的一份，拷贝，因为常量并不能修改，所以获取的是拷贝，也没有太多问题</li>
<li>如果这里，去掉这个static，外部文件引用这个头文件，就会出现符号重定义的链接错误</li>
<li>但是这种实现全局常量的方式不太好</li>
</ul>


<h3>4. <code>.h</code> 里定义static 变量</h3>

<pre><code class="obj-c">// .h
static int intVar;
</code></pre>

<ul>
<li>这里同在<code>.h</code>里定义static 常量一样，每一个引用该头文件的源文件，获取到的是这个变量的一份拷贝，也就是说你在不同的文件里，修改这个变量，都是修改当前文件里的一份拷贝，只会在当前这个文件范围里生效</li>
</ul>


<pre><code class="obj-c">// a.h 
static int a = 0;  //定义了一个全局变量
@interface A: NSObject
+ (void)printA; //打印a的值
@end

// a.m
@implementation 
+ (void)printA {
    NSLog("%d",a);
}
@end
// b.h
@interface B: NSObject
+ (void)printA; //打印a的值
@end

// b.m 
#import "a.h" //引入了全局变量 a
@implementation 
+ (void)printA {
    a ++;
    NSLog("%d",a);
}
@end
// main.m
[A printA];  // 1 
[B printA];  // 2
[A printA];  // 1
[B printA];  // 3
[A printA];  // 1
[B printA];  // 4
</code></pre>

<ul>
<li>所以这种方式，定义的变量，并不是真正的全局变量。</li>
</ul>


<h3>5.更优雅的方式，定义全局变量和全局常量</h3>

<ul>
<li>在<code>.m</code>文件里，定义全局变量，和全局常量，不用static修饰</li>
<li>在<code>.h</code>文件里，用extern声明这些全局变量和全局</li>
<li>其他文件引用这个<code>.h</code>来使用相应的常量和变量。</li>
</ul>


<pre><code class="obj-c">// .m
int a;

// .h
extern int a;
</code></pre>
]]></content>
  </entry>
  
</feed>
