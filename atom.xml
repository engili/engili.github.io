<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lmt的博客]]></title>
  <link href="http://engili.github.io/atom.xml" rel="self"/>
  <link href="http://engili.github.io/"/>
  <updated>2018-05-06T07:27:02+08:00</updated>
  <id>http://engili.github.io/</id>
  <author>
    <name><![CDATA[limengtian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Core Animation 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/04/21/coreanimation-notes/"/>
    <updated>2018-04-21T22:42:39+08:00</updated>
    <id>http://engili.github.io/blog/2018/04/21/coreanimation-notes</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>CoreAnimation</h2>

<p><code>CoreAnimation</code>将视图转换为<code>位图</code>，可以直接在<code>GPU</code>上操作，实现动画效果</p>

<h3>1. Implicit Animations</h3>

<ul>
<li>修改layer对象的可动画属性，会有默认的动画效果</li>
<li>当修改layer tree上的layer对象时，对象的属性立即改变，但是表现层的layer并没有立即改变，这个时候Core Animation 根据你修改的值，创建了默认时间函数和动画参数的动画，在下一个更新周期执行动画</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'> <span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">opacity</span> <span class="o">=</span> <span class="mf">0.0</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Explicit Animations</h3>

<ul>
<li>创建动画对象，并添加到layer上</li>
<li>和隐式动画不同，显式动画并不会修改layer 的数据model值</li>
<li>动画结束后，core animation 会使用layer当前的值，重绘layer</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">animation</span> <span class="o">=</span> <span class="bp">CABasicAnimation</span><span class="p">(</span><span class="nl">keyPath</span><span class="p">:</span> <span class="s">&quot;opacity&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">animation</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="bp">NSNumber</span><span class="p">(</span><span class="nl">floatLiteral</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'><span class="n">animation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="bp">NSNumber</span><span class="p">(</span><span class="nl">floatLiteral</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">)</span>
</span><span class='line'><span class="n">animation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">3.0</span>
</span><span class='line'>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">animation</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;fadeAnimation&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置成最终的值</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">opacity</span> <span class="o">=</span> <span class="mf">0.0</span>
</span></code></pre></td></tr></table></div></figure>


<h4>注：</h4>

<ul>
<li>隐式动画和显式动画执行时机都在当前<code>run loop cycle</code>结束</li>
<li>动画添加的线程，必须要有run loop，动画才能被执行</li>
<li>修改多个属性，或者添加多个动画，动画都是同时执行的</li>
</ul>


<h3>3. CAKeyframeAnimation 关键帧动画</h3>

<h4>3.1 <code>value</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">values</span><span class="p">:</span> <span class="p">[</span><span class="n">Any</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span> <span class="kr">get</span> <span class="kr">set</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>定义了关键帧动画一组的数值,数值里的元素需要进行一层包装</p>

<ul>
<li> <code>NSValue</code>: <code>CGRect</code>、<code>CATransform3D</code></li>
<li> <code>NSNumber</code>:<code>CGFloat</code></li>
<li> <code>Any</code>:<code>CGColorRef</code>、<code>CGImageRef</code></li>
</ul>
</li>
<li><p>只有当<code>path</code>属性是<code>nil</code>时，这个属性才生效</p></li>
</ul>


<h4>3.2 <code>path</code></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">path</span><span class="p">:</span> <span class="bp">CGPath</span><span class="o">?</span> <span class="p">{</span> <span class="kr">get</span> <span class="kr">set</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>对于一些类型为<code>CGPoint</code>的属性，如（<code>position</code>,<code>anchorPoint</code>），可以通过定义<code>path</code>来定义其关键帧动画的路径</li>
<li>设置了这个属性后，<code>values</code>就失效了</li>
</ul>


<h4>3.3 animation timing</h4>

<p>由三个部分共同作用控制动画的时间</p>

<ul>
<li><code>keyTimes</code></li>
<li><code>timingFunctions</code></li>
<li><code>calculationMode</code></li>
</ul>


<h5>3.3.1 <code>calculationMode</code></h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">calculationMode</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span> <span class="kr">get</span> <span class="kr">set</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>定义了关键帧定义的值之间的中间值如何计算</li>
<li>默认值是 <code>kCAAnimationLinear</code></li>
<li><code>kCAAnimationLinear</code>

<ul>
<li>关键帧<code>values</code>值之间，线性插值</li>
</ul>
</li>
<li><code>kCAAnimationCubic</code>

<ul>
<li>关键帧<code>values</code>值之间,经过圆滑曲线链接后，缓和的插值</li>
</ul>
</li>
<li><code>kCAAnimationDiscrete</code>

<ul>
<li>轮流使用关键帧<code>values</code>的值，没有中间插值被计算,离散的值</li>
</ul>
</li>
<li><code>kCAAnimationPaced</code>

<ul>
<li>忽略<code>keyTimes</code>和<code>timingFunctions</code></li>
<li>使动画均匀的进行</li>
</ul>
</li>
<li><code>kCAAnimationCubicPaced</code>

<ul>
<li>忽略<code>keyTimes</code>和<code>timingFunctions</code></li>
<li>动画均匀进行，更加缓和</li>
</ul>
</li>
</ul>


<h5>3.3.2 keyTimes</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">keyTimes</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSNumber</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span> <span class="kr">get</span> <span class="kr">set</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>类型<code>CGFloat</code>，范围0.0 - 1.0</li>
<li>值依次增大，代表整个动画时间的百分比</li>
<li>当使用线性或曲线性<code>calculationMode</code>时，数组第一个元素一定是是0.0，数组最后一个元素是1.0，每个value对应的时间值，依次在两者中间一一对应</li>
<li>当使用离散<code>calculationMode</code>时，数组第一个元素一定是是0.0，数组最后一个元素是1.0，中间元素的数目，要比value中数目大一个。</li>
<li>当使用固定速率的<code>calculationMode</code>时，这个属性被忽略</li>
</ul>


<h5>3.3.3 timingFunctions</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">timingFunctions</span><span class="p">:</span> <span class="p">[</span><span class="bp">CAMediaTimingFunction</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span> <span class="kr">get</span> <span class="kr">set</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>定义两个关键帧直接动画的时间函数</li>
<li>数目为<code>values</code>数目减1</li>
<li>和<code>keyTimes</code>共同决定每两个关键帧之间的timing</li>
<li>If you also specify a timing function in the animation object’s timingFunction property, that function is applied first followed by the timing function for the specific keyframe segment.</li>
</ul>


<h3>4. 移除显示动画</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">removeAnimation</span><span class="p">(</span><span class="n">forKey</span> <span class="nl">key</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>移除特定key值的动画，添加动画时定义的key值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">removeAllAnimations</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>移除所有动画</li>
</ul>


<p>当一个正在进行的动画被移除的时候，core animation 使用layer的值（一般是动画结束的值）来重绘制，可能就会出现抖动。可以使用表现层layer的值，来设置layer的值</p>

<h3>5. 自定义动画的时间</h3>

<ul>
<li><code>beginTime</code>: 动画默认在下一个run loop cycle 开始时执行，定义beginTime 可以让动画延迟执行，也可以让几个动画，串行执行</li>
<li><code>timeOffset</code> 可以让animation group中的某些动画，延后执行</li>
</ul>


<h3>6.性能建议</h3>

<ul>
<li>尽量保持<code>opaque</code>属性为<code>true</code></li>
<li><code>CAShapeLayer</code>尽量使用简单的<code>path</code>,较为复杂的实现，可以转换为多个简单<code>path</code>的<code>CAShapeLayer</code>的组合</li>
<li>若使用自己的图片，尽量直接设置<code>contents</code>属性,layer就不会为 back store消耗内存，而直接使用提供的图片</li>
<li>尽量使用整数设置layer的宽高</li>
<li>使用异步渲染 <code>drawsAsynchronously</code>,一般绘制回调，如<code>drawRect:</code>都是在主线程进行的，设置<code>drawsAsynchronously</code>属性后，会在异步线程进行回调，但需要注意线程安全，同时使用的时候，实际测量是否真的提高性能了</li>
<li>添加阴影的时候，设置<code>shadowPath</code>，而不是让Core Animation去决定阴影，</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CALayer 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/04/05/calayer-notes/"/>
    <updated>2018-04-05T17:05:05+08:00</updated>
    <id>http://engili.github.io/blog/2018/04/05/calayer-notes</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>1. CALayer (Model Object)</h3>

<ul>
<li>CALayer是Model Objcet</li>
<li>主要管理<code>位图</code>数据信息，位图内容可以是View绘制也可以是设置的图片</li>
<li>大多数Layer不进行绘制，只是将View的内容换成为位图</li>
</ul>


<h4>1.1 CALayer 坐标</h4>

<h5>1.1.1  point-based 坐标系统</h5>

<ul>
<li>基于屏幕坐标系统，可以表示layer之间的关系</li>
<li><code>bounds</code>和<code>position</code>属性</li>
</ul>


<h5>1.1.2 unit 坐标系统</h5>

<ul>
<li>和屏幕坐标系统无关</li>
<li><code>anchorPoint</code>

<ul>
<li>默认值是（0.5.0.5） 取值范围 0 - 1</li>
<li>影响<code>position</code>属性

<ul>
<li>当anchorPoint为（0，0）时，<code>position</code>在layer左上角</li>
<li>当anchorPoint为（1，1）时，<code>position</code>在layer右下角</li>
<li>当anchorPoint为（0.5，0.5）时，<code>position</code>在layer中心</li>
</ul>
</li>
<li>影响旋转<code>transform</code>的中心点</li>
</ul>
</li>
</ul>


<h3>2. Layer Trees</h3>

<ul>
<li>layer tree

<ul>
<li>layer Model对象，管理位图数据</li>
</ul>
</li>
<li>presentation tree

<ul>
<li>当动画正在进行的时候，可以通过<code>presentation tree</code> 获取当前状态的值</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">presentation</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Self</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法，返回 屏幕上正在动画，当前状态下的layer。这个layer对象的sublayers, mask, and superlayer 属性得到的对象都是在<code>presentation tree</code>上</p>

<ul>
<li>render tree

<ul>
<li>执行实际的动画layer，私有类</li>
</ul>
</li>
</ul>


<h3>3. 改变UIView底层对应的Layer</h3>

<ul>
<li>重写<code>layerClass</code>方法即可</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">class</span> <span class="k">var</span> <span class="nl">layerClass</span><span class="p">:</span> <span class="n">Swift</span><span class="p">.</span><span class="n">AnyClass</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">CAGradientLayer</span><span class="p">.</span><span class="nb">self</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. CALayer subclasses</h3>

<!--- CAEmitterLayer

Used to implement a Core Animation–based particle emitter system. The emitter layer object controls the generation of the particles and their origin.-->


<h4>4.1 CAGradientLayer</h4>

<ul>
<li>绘制渐变色的Layer</li>
</ul>


<h5>property</h5>

<ul>
<li><code>var colors: [Any]? { get set }</code>

<ul>
<li>数组元素为<code>CGColorRef</code> 才能生效</li>
</ul>
</li>
<li><code>var locations: [NSNumber]? { get set }</code>

<ul>
<li>数组元素为0到1 增长数， 表示颜色停止的区间</li>
<li>数目和<code>colors</code>相同</li>
</ul>
</li>
<li><code>var startPoint: CGPoint { get set }</code>

<ul>
<li>unit 坐标系统属性，渐变色开始位置</li>
<li>默认值是(0.5,0)</li>
</ul>
</li>
<li><code>var endPoint: CGPoint { get set }</code>

<ul>
<li>unit 坐标系统属性，渐变色结束位置</li>
<li>默认值是(0.5,1)</li>
</ul>
</li>
</ul>


<p>创建一个渐变色Layer</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'> <span class="k">class</span> <span class="nl">MTGradientView</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">class</span> <span class="k">var</span> <span class="nl">layerClass</span><span class="p">:</span> <span class="n">Swift</span><span class="p">.</span><span class="n">AnyClass</span>  <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">CAGradientLayer</span><span class="p">.</span><span class="nb">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">override</span> <span class="k">init</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="bp">CGRect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">setupLayer</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fileprivate</span> <span class="k">func</span> <span class="n">setupLayer</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">gradientLayer</span><span class="o">?</span><span class="p">.</span><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span><span class="p">.</span><span class="n">red</span><span class="p">.</span><span class="n">cgColor</span><span class="p">,</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">yellow</span><span class="p">.</span><span class="n">cgColor</span><span class="p">]</span>
</span><span class='line'>        <span class="n">gradientLayer</span><span class="o">?</span><span class="p">.</span><span class="n">locations</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="n">gradientLayer</span><span class="o">?</span><span class="p">.</span><span class="n">startPoint</span> <span class="o">=</span> <span class="p">.</span><span class="n">zero</span>
</span><span class='line'>        <span class="n">gradientLayer</span><span class="o">?</span><span class="p">.</span><span class="n">endPoint</span> <span class="o">=</span> <span class="bp">CGPoint</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<!--
- CAMetalLayer

Used to set up and vend drawable textures for rendering layer content using Metal.

- CAEAGLLayer/CAOpenGLLayer

Used to set up the backing store and context for rendering layer content using OpenGL ES (iOS) or OpenGL (OS X).

- CAReplicatorLayer

Used when you want to make copies of one or more sublayers automatically. The replicator makes the copies for you and uses the properties you specify to alter the appearance or attributes of the copies.

- CAScrollLayer

Used to manage a large scrollable area composed of multiple sublayers.

- CAShapeLayer

Used to draw a cubic Bezier spline. Shape layers are advantageous for drawing path-based shapes because they always result in a crisp path, as opposed to a path you draw into a layer’s backing store, which would not look as good when scaled. However, the crisp results do involve rendering the shape on the main thread and caching the results.

- CATextLayer

Used to render a plain or attributed string of text.

- CATiledLayer

Used to manage a large image that can be divided into smaller tiles and rendered individually with support for zooming in and out of the content.

- CATransformLayer

Used to render a true 3D layer hierarchy, rather than the flattened layer hierarchy implemented by other layer classes.

- QCCompositionLayer

Used to render a Quartz Composer composition. (OS X only)
-->


<h4>4.2 设置Layer content</h4>

<p>设置Lyaer的content，三种方法</p>

<h5>4.2.1 给layer的<code>contents</code>属性，设置图片（适用于内容几乎不会或者很少改变</h5>

<ul>
<li><code>var contents: Any? { get set }</code> 使用<code>CGImage</code></li>
<li>赋值这个属性后，layer就会使用这个图片，而不会生成自己的<code>backing store</code></li>
<li>和UIView绑定的layer，最后不要单独设置这个属性</li>
</ul>


<h5>4.2.2 给layer设置<code>delegate</code>,让委托去绘制内容</h5>

<ul>
<li><code>UIView</code>底层的layer，自动和UIView设置了委托关系</li>
<li><p><code>weak var delegate: CALayerDelegate? { get set }</code></p></li>
<li><p><code>func display(_ layer: CALayer)</code></p>

<ul>
<li>当layer被标记为content需要reload是，例如在<code>setNeedsDisplay</code> 后会调用到该方法</li>
<li>在该方法中，一般通过设置layer的contens属性</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'>   <span class="k">func</span> <span class="nf">display</span><span class="p">(</span><span class="n">_</span> <span class="nl">layer</span><span class="p">:</span> <span class="bp">CALayer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">if</span> <span class="k">let</span> <span class="n">image</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">loadImageFromBundle</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>           <span class="n">layer</span><span class="p">.</span><span class="n">bounds</span> <span class="o">=</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">image</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="n">image</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>           <span class="n">layer</span><span class="p">.</span><span class="n">contents</span> <span class="o">=</span> <span class="n">image</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>func draw(_ layer: CALayer, in ctx: CGContext)</code>

<ul>
<li>当layer被标记为content需要reload是，例如在<code>setNeedsDisplay</code> 后会调用到该方法</li>
<li>如果委托实现了<code>display(_ :)</code>，该方法不会被调用</li>
</ul>
</li>
<li><code>func layerWillDraw(_ layer: CALayer)</code>

<ul>
<li>在绘制回调<code>draw(_ , in ctx:)</code> 之前被调用</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">draw</span><span class="p">(</span><span class="n">_</span> <span class="nl">layer</span><span class="p">:</span> <span class="bp">CALayer</span><span class="p">,</span> <span class="k">in</span> <span class="nl">ctx</span><span class="p">:</span> <span class="bp">CGContext</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">CGMutablePath</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">path</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="nl">to</span><span class="p">:</span> <span class="p">.</span><span class="n">zero</span><span class="p">)</span>
</span><span class='line'>    <span class="n">path</span><span class="p">.</span><span class="n">addRect</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ctx</span><span class="p">.</span><span class="n">setLineWidth</span><span class="p">(</span><span class="mf">5.0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ctx</span><span class="p">.</span><span class="n">setStrokeColor</span><span class="p">(</span><span class="bp">UIColor</span><span class="p">.</span><span class="n">red</span><span class="p">.</span><span class="n">cgColor</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ctx</span><span class="p">.</span><span class="n">addPath</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ctx</span><span class="p">.</span><span class="n">strokePath</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="nf">layerWillDraw</span><span class="p">(</span><span class="n">_</span> <span class="nl">layer</span><span class="p">:</span> <span class="bp">CALayer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//called before draw(_ , in ctx:) </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>func layoutSublayers(of layer: CALayer)</code></p>

<ul>
<li>当layer的<code>bounds</code>改变时，需要重新对子layer进行布局</li>
</ul>
</li>
<li><p><code>func action(for layer: CALayer, forKey event: String) -&gt; CAAction?</code></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">action</span><span class="p">(</span><span class="k">for</span> <span class="nl">layer</span><span class="p">:</span> <span class="bp">CALayer</span><span class="p">,</span> <span class="n">forKey</span> <span class="nl">event</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">CAAction</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">event</span> <span class="o">==</span> <span class="s">&quot;moveRight&quot;</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">animation</span> <span class="o">=</span> <span class="bp">CABasicAnimation</span><span class="p">()</span>
</span><span class='line'>    <span class="n">animation</span><span class="p">.</span><span class="n">valueFunction</span> <span class="o">=</span> <span class="bp">CAValueFunction</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">kCAValueFunctionTranslateX</span><span class="p">)</span>
</span><span class='line'>    <span class="n">animation</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">animation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="mi">300</span>
</span><span class='line'>    <span class="n">animation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">animation</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 外界调用</span>
</span><span class='line'><span class="n">fileprivate</span> <span class="k">func</span> <span class="n">moveLayerToRight</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">action</span> <span class="o">=</span> <span class="n">startLayer</span><span class="p">.</span><span class="n">action</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;moveRight&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">action</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;transform&quot;</span><span class="p">,</span> <span class="nl">object</span><span class="p">:</span> <span class="n">startLayer</span><span class="p">,</span> <span class="nl">arguments</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>4.2.3 定义layer的子类，重写绘制的方法</h5>

<ul>
<li><code>func display()</code>

<ul>
<li>该方法的默认实现是，若当前layer有delegate，会去调用delegate 的 <code>func display(_ layer: CALayer)</code> 方法，若delegate，没有实现这个方法，这个方法，创建back store，然后调用layer的<code>func draw(in ctx: CGContext)</code></li>
<li>当layer被标记为content需要reload是，例如在<code>setNeedsDisplay</code> 后会调用到该方法</li>
<li>在该方法中，一般通过设置layer的contens属性</li>
</ul>
</li>
<li><code>func draw(in ctx: CGContext)</code>

<ul>
<li>绘制</li>
</ul>
</li>
</ul>


<h3>5. Contents Property</h3>

<ul>
<li><p>position-based gravity constants</p>

<p>  <img src="https://github.com/engili/engili.github.io/raw/master/images/layer_contentsgravity1_2x.png" width="547"></p></li>
<li><p>scalling-based gravity constatns</p>

<p>  <img src="https://github.com/engili/engili.github.io/raw/master/images/positioningmask_2x.png" width="472" height="255"></p></li>
</ul>


<h3>6. 定义Layer其他外观</h3>

<ul>
<li><code>background</code> 位于contents image 下</li>
<li><code>border</code> 位于contens image 上</li>
</ul>


<h3>7. layer Hierarchy</h3>

<ul>
<li>将layer添加到layer Hierarchy后，一定要设置layer的<code>bounds</code>和<code>position</code>,Core Animation 默认设置layer的长宽为0，layer的<code>position</code>为（0，0）</li>
<li>尽量使用整数设置Layer的长和宽</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keyboards 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/04/01/keyboards-notes/"/>
    <updated>2018-04-01T20:13:05+08:00</updated>
    <id>http://engili.github.io/blog/2018/04/01/keyboards-notes</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Notification</h2>

<ul>
<li>键盘显示(前/后)发送的通知

<ul>
<li>UIKeyboardWillShowNotification</li>
<li>UIKeyboardDidShowNotification</li>
</ul>
</li>
<li>键盘消失(前/后)发送的通知

<ul>
<li>UIKeyboardWillHideNotification</li>
<li>UIKeyboardDidHideNotification</li>
</ul>
</li>
<li>键盘frame改变（前/后）的通知

<ul>
<li>UIKeyboardWillChangeFrameNotification</li>
<li>UIKeyboardDidChangeFrameNotification</li>
</ul>
</li>
</ul>


<h4>键盘弹起通知顺序</h4>

<ol>
<li>UIKeyboardWillChangeFrameNotification</li>
<li>UIKeyboardWillShowNotification</li>
<li>UIKeyboardDidChangeFrameNotification</li>
<li>UIKeyboardDidShowNotification</li>
</ol>


<h4>键盘收起通知顺序</h4>

<ol>
<li>UIKeyboardWillChangeFrameNotification</li>
<li>UIKeyboardWillHideNotification</li>
<li>UIKeyboardDidChangeFrameNotification</li>
<li>UIKeyboardDidHideNotification</li>
</ol>


<h4>切换键盘通知顺序</h4>

<ol>
<li>UIKeyboardWillChangeFrameNotification</li>
<li>UIKeyboardWillShowNotification</li>
<li>UIKeyboardDidChangeFrameNotification</li>
<li>UIKeyboardDidShowNotification</li>
</ol>


<p>这些通知收到的duration 一般为0。</p>

<h3>UserInfo</h3>

<p>通知的notification object 为nil，通知信息都在<code>userInfo</code>中</p>

<ul>
<li>UIKeyboardAnimationCurveUserInfoKey

<ul>
<li>包含<code>NSNumber</code>包装的<code>UIViewAnimationCurve</code>，获取键盘动画的时间函数</li>
<li>测试的时候，取到的值为7，不能转换成任何定义好的的时间函数（迷&hellip;）</li>
</ul>
</li>
<li>UIKeyboardAnimationDurationUserInfoKey

<ul>
<li>包含<code>NSNumber</code>包装的<code>double</code>,获取键盘动画时间</li>
</ul>
</li>
<li>UIKeyboardIsLocalUserInfoKey

<ul>
<li>包含<code>NSNumber</code>包装的<code>Bool</code>,获取当前键盘是不是App调起的，一般用于iPad等多窗口下的应用开发</li>
</ul>
</li>
<li>UIKeyboardFrameBeginUserInfoKey

<ul>
<li>包含<code>NSValue</code>包装的<code>CGRect</code>，获取键盘开始的frame在屏幕坐标系下，frame值和设备方向有关</li>
</ul>
</li>
<li>UIKeyboardFrameEndUserInfoKey

<ul>
<li>包含<code>NSValue</code>包装的<code>CGRect</code>，获取键盘结束的frame在屏幕坐标系下，frame值和设备方向有关</li>
<li>一般使用这个key值对应frame的size</li>
</ul>
</li>
</ul>


<h4>注：</h4>

<ul>
<li>只应该使用<code>UIKeyboardFrameBeginUserInfoKey</code>和<code>UIKeyboardFrameEndUserInfoKey</code>中的size信息，因为键盘在动画，orgign可能会随时改动。</li>
<li>因为键盘的高度总会改变，一般应该使用<code>UIKeyboardFrameEndUserInfoKey</code>中的size信息

<ul>
<li>实际开发中，遇到过使用origin，在屏幕旋转成横屏，又旋转回竖屏的时候，拿到的origin就改变了的问题，所以一般还是使用size属性就好</li>
</ul>
</li>
</ul>


<h3>Demo</h3>

<h4>实现一个位于底部的文本框，可以跟随键盘弹出和收起</h4>

<h6>监听通知</h6>

<figure class='code'><figcaption><span>监听UIKeyboardWillShow 和 UIKeyboardWillHide </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">fileprivate</span> <span class="k">func</span> <span class="nf">registerNotification</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NotificationCenter</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nl">selector</span><span class="p">:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">keyboardWillShow</span><span class="p">(</span><span class="nl">_</span><span class="p">:)),</span> <span class="nl">name</span><span class="p">:</span> <span class="bp">NSNotification</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">UIKeyboardWillShow</span><span class="p">,</span> <span class="nl">object</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">NotificationCenter</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nl">selector</span><span class="p">:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">keyboardWillHide</span><span class="p">(</span><span class="nl">_</span><span class="p">:)),</span> <span class="nl">name</span><span class="p">:</span> <span class="bp">NSNotification</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">UIKeyboardWillHide</span><span class="p">,</span> <span class="nl">object</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>UIKeyboardWillShow</h5>

<figure class='code'><figcaption><span>UIKeyboardWillShow进行弹起，或者键盘高度改变动画</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">objc</span> <span class="n">fileprivate</span> <span class="k">func</span> <span class="n">keyboardWillShow</span><span class="p">(</span><span class="n">_</span> <span class="nl">notification</span> <span class="p">:</span> <span class="n">Notification</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">duration</span> <span class="o">=</span> <span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?</span><span class="p">[</span><span class="n">UIKeyboardAnimationDurationUserInfoKey</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">NSNumber</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">doubleValue</span> <span class="o">??</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">endFrame</span> <span class="o">=</span> <span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?</span><span class="p">[</span><span class="n">UIKeyboardFrameEndUserInfoKey</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">NSValue</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">cgRectValue</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">height</span> <span class="o">=</span> <span class="n">endFrame</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="n">duration</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">beginFromCurrentState</span><span class="p">],</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="nb">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>            <span class="c1">//到底部的约束为键盘高度</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">?</span><span class="p">.</span><span class="n">bottomAlignConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">?</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">layoutIfNeeded</span><span class="p">()</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>UIKeyboardWillHide</h4>

<figure class='code'><figcaption><span>键盘收起动画</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">objc</span> <span class="n">fileprivate</span> <span class="k">func</span> <span class="n">keyboardWillHide</span><span class="p">(</span><span class="n">_</span> <span class="nl">notification</span> <span class="p">:</span> <span class="n">Notification</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">duration</span> <span class="o">=</span> <span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?</span><span class="p">[</span><span class="n">UIKeyboardAnimationDurationUserInfoKey</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">NSNumber</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">doubleValue</span> <span class="o">??</span> <span class="mi">0</span>
</span><span class='line'>    <span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="n">duration</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">beginFromCurrentState</span><span class="p">],</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="nb">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>        <span class="c1">//到底部的约束为0</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">?</span><span class="p">.</span><span class="n">bottomAlignConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">?</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">layoutIfNeeded</span><span class="p">()</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>相关Demo地址</h2>

<p><a href="https://github.com/engili/Blog-Demos/tree/master/iOS/UIKit/Keyboard/MTKeyboardNotificationDemo">Demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIKit Animations 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/03/24/uikit-animations-note/"/>
    <updated>2018-03-24T21:33:06+08:00</updated>
    <id>http://engili.github.io/blog/2018/03/24/uikit-animations-note</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>1. UIView 可动画属性 (Animatable Property)</h3>

<ul>
<li>frame

<ul>
<li>当<code>transform</code> 属性不为<code>identity</code>时，<code>frame</code>是未定义的，使用<code>bounds</code>或<code>center</code>做动画</li>
</ul>
</li>
<li>bounds</li>
<li>center</li>
<li>transform</li>
<li>alpha</li>
<li>backgroundColor</li>
<li><del>contentStretch</del> (iOS 7.0弃用）

<ul>
<li><del>Modify this property to change the way the view’s contents are stretched to fill the available space.</del></li>
</ul>
</li>
</ul>


<h5>注：改变某个正在进行的动画的属性的值，并不会打断动画，而是动画继续执行，并且最终态到你设置的那个值</h5>

<h3>2. Animations Block-Based Methods</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="k">func</span> <span class="n">animate</span><span class="p">(</span><span class="n">withDuration</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这个方法使用<code>curveEaseInOut</code>和<code>transitionNone</code>选项，动画期间动画的View不响应用户交互</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="k">func</span> <span class="n">animate</span><span class="p">(</span><span class="n">withDuration</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">,</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">((</span><span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>completion</code>,如果<code>duration</code>值是0，block会在下一个<code>runloop cycle</code>被调用</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="k">func</span> <span class="n">animate</span><span class="p">(</span><span class="n">withDuration</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptions</span> <span class="o">=</span> <span class="p">[],</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">,</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">((</span><span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>options</code> 可以设置一个或者多个，以数组的形式</li>
</ul>


<h4>2.1 UIViewAnimationOptions</h4>

<h5>2.1.1 常规属性（可以设置多个）</h5>

<ul>
<li>layoutSubviews

<ul>
<li>layout子View，让他们随父view一起动画</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>必须重写view的LayoutSubViews方法</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//  MTAnimateView.swift</span>
</span><span class='line'><span class="k">class</span> <span class="nl">MTAnimateView</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">subview</span><span class="p">:</span> <span class="bp">UIView</span><span class="o">!</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">bounds</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>        <span class="n">subview</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">bounds</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="n">bounds</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//UIViewController.swift</span>
</span><span class='line'><span class="k">class</span> <span class="nl">ViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">redView</span><span class="p">:</span> <span class="n">MTAnimateView</span><span class="o">!</span>
</span><span class='line'>    <span class="c1">//动画block 扩大bounds，长宽各100，不带`layoutSubviews` 动画效果就很奇怪</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">animateWithLayoutSubViews</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">orginBounds</span> <span class="o">=</span> <span class="n">redView</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>        <span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">layoutSubviews</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">bounds</span> <span class="o">=</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="n">orginBounds</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">orginBounds</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">orginBounds</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="n">orginBounds</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">bounds</span> <span class="o">=</span> <span class="n">orginBounds</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>allowUserInteraction

<ul>
<li>响应动画时的用户交互</li>
</ul>
</li>
<li><p>beginFromCurrentState</p>

<blockquote><p>If this key is not present, all in-flight animations are allowed to finish before the new animation is started. If another animation is not in flight, this key has no effect.</p></blockquote></li>
<li><p>`repeat`</p>

<ul>
<li>重复动画</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">repeat</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//重复执行3次</span>
</span><span class='line'>            <span class="bp">UIView</span><span class="p">.</span><span class="n">setAnimationRepeatCount</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>autoreverse

<ul>
<li>与<code>repeat</code>配合使用，动画能回溯</li>
</ul>
</li>
<li>overrideInheritedDuration

<ul>
<li>忽略嵌套动画的时间,使用自己设置的<code>duration</code></li>
</ul>
</li>
<li>overrideInheritedCurve

<ul>
<li>忽略嵌套动画的时间曲线，使用自己设置的时间曲线</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>嵌套动画</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="mf">2.0</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">curveEaseIn</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">redViewNewCenter</span>
</span><span class='line'>        <span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">curveEaseOut</span><span class="p">,</span> <span class="p">.</span><span class="n">overrideInheritedDuration</span><span class="p">,</span> <span class="p">.</span><span class="n">overrideInheritedCurve</span><span class="p">],</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">blueView</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">blueViewNewCenter</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">blueView</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">blueViewOriginalCenter</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">redViewOriginalCenter</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>allowAnimatedContent

<ul>
<li>动画的时候，重绘View，没设置这个选项的时候，动画都是使用的截图</li>
</ul>
</li>
<li>showHideTransitionViews

<ul>
<li>用于转场动画</li>
</ul>
</li>
</ul>


<blockquote><p>When present, this key causes views to be hidden or shown (instead of removed or added) when performing a view transition. Both views must already be present in the parent view’s hierarchy when using this key. If this key is not present, the to-view in a transition is added to, and the from-view is removed from, the parent view’s list of subviews.</p></blockquote>

<ul>
<li>overrideInheritedOptions</li>
</ul>


<h5>2.1.2 速度属性 （可以设置一个）</h5>

<ul>
<li>curveEaseInOut

<ul>
<li>开始慢，中间加速，结尾慢</li>
</ul>
</li>
<li>curveEaseIn

<ul>
<li>开始慢，一直加速</li>
</ul>
</li>
<li>curveEaseOut

<ul>
<li>开始快，一直减速</li>
</ul>
</li>
<li>curveLinear

<ul>
<li>均匀的</li>
</ul>
</li>
</ul>


<h5>2.1.3 转场动画属性 （可以设置一个）</h5>

<ul>
<li>transitionFlipFromLeft</li>
<li>transitionFlipFromRight</li>
<li>transitionCurlUp</li>
<li>transitionCurlDown</li>
<li>transitionCrossDissolve</li>
<li>transitionFlipFromTop</li>
<li>transitionFlipFromBottom</li>
<li>preferredFramesPerSecond30</li>
<li>preferredFramesPerSecond60</li>
</ul>


<h3>3. 嵌套动画</h3>

<p>嵌套动画，是嵌套在其他动画block中的动画，他开始动画的时间和他父动画一样，并且继承父动画的时间，时间曲线和其他动画配置。
可以通过<code>overrideInheritedDuration</code>、<code>overrideInheritedCurve</code> 来使用自己的配置做动画</p>

<h3>4. 转场动画 (动画效果比较浮夸，用的较少)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="k">func</span> <span class="n">transition</span><span class="p">(</span><span class="n">with</span> <span class="nl">view</span><span class="p">:</span> <span class="bp">UIView</span><span class="p">,</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptions</span> <span class="o">=</span> <span class="p">[],</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span><span class="p">,</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">((</span><span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在<code>view</code>中进行转场动画</li>
<li>在<code>animations</code>中可以add、remove、hide、show view，如果想要其他动画效果，需要配置<code>allowAnimatedContent</code></li>
</ul>


<figure class='code'><figcaption><span>示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIView</span><span class="p">.</span><span class="n">transition</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">redView</span><span class="p">,</span> <span class="nl">duration</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">transitionFlipFromLeft</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">greenView</span><span class="p">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">blueView</span><span class="p">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="k">func</span> <span class="n">transition</span><span class="p">(</span><span class="n">from</span> <span class="nl">fromView</span><span class="p">:</span> <span class="bp">UIView</span><span class="p">,</span> <span class="n">to</span> <span class="nl">toView</span><span class="p">:</span> <span class="bp">UIView</span><span class="p">,</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptions</span> <span class="o">=</span> <span class="p">[],</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">((</span><span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这个方法，从<code>fromView</code>转场到<code>toView</code></li>
<li>系统实现是直接从视图层级中移除，可以使用 <code>showHideTransitionViews</code> 只是显示和隐藏两个view</li>
</ul>


<h3>5. UIViewPropertyAnimator</h3>

<h5>5.1.1 构造方法</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">convenience</span> <span class="k">init</span><span class="p">(</span><span class="nl">duration</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">curve</span><span class="p">:</span> <span class="n">UIViewAnimationCurve</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>构造函数 创建出的animator是<code>inactive</code>状态</li>
<li>需要调用<code>startAnimation()</code>开始动画</li>
</ul>


<h5>5.1.2 添加动画</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">addAnimations</span><span class="p">(</span><span class="n">_</span> <span class="nl">animation</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>可以通过这个方法，添加多个动画block</li>
<li><code>inactive</code> 状态下，添加的动画，进行时间是配置的时间，<code>active</code>状态下，添加的动画，进行的时间，是animtor剩余的时间</li>
<li><code>stopped</code>状态下，添加动画，会报错</li>
</ul>


<h5>5.1.3 添加动画结束回调</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'> <span class="k">func</span> <span class="n">addCompletion</span><span class="p">(</span><span class="n">_</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">(</span><span class="n">UIViewAnimatingPosition</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>动画正常结束时，执行回调</li>
<li>调用<code>stopAnimation(_:)</code> 参数设置<code>true</code>,执行回调</li>
<li>调用<code>stopAnimation(_:)</code> 参数设置<code>false</code>,在<code>finishAnimation(at:)</code>调用后，执行回调</li>
</ul>


<h5>5.1.4 continueAnimation</h5>

<p>调整一个暂停动画的 时间函数 和 时间</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">continueAnimation</span><span class="p">(</span><span class="n">withTimingParameters</span> <span class="nl">parameters</span><span class="p">:</span> <span class="n">UITimingCurveProvider</span><span class="o">?</span><span class="p">,</span> <span class="nl">durationFactor</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>调用该方法，需要animtor处于<code>active</code>且暂停的状态</li>
<li>当状态处于非<code>active</code>,或动画正在进行，或者 <code>isInterruptible</code>属性是false时 会报错</li>
<li><code>parameters</code>: 新的时间函数，但是为了避免，动画有跳动的现象，一般改变时间函数后，会有一定的过渡效果</li>
<li><code>durationFactor</code>: 时间乘法因子，和原有的时间，相乘，获取最终的时间</li>
<li>当这次动画结束后，才会重写aniator的<code>timing</code>和<code>duration</code>属性</li>
</ul>


<h4>5.2 UIViewAnimating</h4>

<h5>5.2.1 UIViewAnimatingState</h5>

<ul>
<li>inactive

<ul>
<li>构造方法创建的animator初始状态</li>
</ul>
</li>
<li>active

<ul>
<li>当调用<code>startAnimation()</code> 或 <code>pauseAnimation()</code> 后，处于这个状态</li>
</ul>
</li>
<li>stopped

<ul>
<li>动画自然结束，或者调用<code>stopAnimation(_:)</code></li>
<li>调用<code>stopAnimation(_:)</code>,会让动画停留在当前值，而不是最终动画设定的值</li>
</ul>
</li>
</ul>


<p><img src="https://github.com/engili/engili.github.io/raw/master/images/animation_states_2x.png" width="373" height="236"></p>

<h5>5.2.2 UIViewAnimatingPosition</h5>

<ul>
<li>end</li>
<li>start</li>
<li>current</li>
</ul>


<h5>5.2.3 动画状态改变</h5>

<ul>
<li><code>startAnimation()</code>

<ul>
<li>开始一个动画，或者恢复一个暂停的动画</li>
<li><code>stopped</code>状态的动画，不能调用该方法</li>
</ul>
</li>
<li><code>pauseAnimation()</code>

<ul>
<li>暂停动画</li>
<li><code>inactive</code>动画调用后，转为<code>active状态</code>，并且动画处于暂停状态</li>
</ul>
</li>
<li><code>stopAnimation(_:)</code> 使动画，在当前状态停止</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">stopAnimation</span><span class="p">(</span><span class="n">_</span> <span class="nl">withoutFinishing</span><span class="p">:</span> <span class="n">Bool</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>withoutFinishing</code>:</p>

<ul>
<li>设置为<code>true</code>,animator进入<code>inactive</code>状态</li>
<li>设置为<code>false</code>,animator进入<code>stopped</code>状态，之后可以进行一些其他操作，</li>
</ul>
</li>
<li><p><code>finishAnimation(at:)</code>使得动画结束，animator回到<code>inactive</code></p></li>
</ul>


<h5>5.2.4 可交互动画</h5>

<ul>
<li><code>fractionComplete</code>

<ul>
<li>动画完成百分比</li>
<li>通过修改这个值，可以使animator进行到相应的过程</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>一个可交互动画例子</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">objc</span> <span class="n">fileprivate</span> <span class="k">func</span> <span class="n">handleInterruptableGesture</span><span class="p">(</span><span class="n">_</span> <span class="nl">gesture</span><span class="p">:</span> <span class="bp">UIPanGestureRecognizer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">offset</span> <span class="o">=</span> <span class="bp">UIScreen</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">100</span>
</span><span class='line'>    <span class="k">switch</span> <span class="n">gesture</span><span class="p">.</span><span class="n">state</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">began</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">interruptableAnimator</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">interruptableAnimator</span> <span class="o">=</span> <span class="n">UIViewPropertyAnimator</span><span class="p">(</span><span class="nl">duration</span><span class="p">:</span> <span class="mf">3.0</span><span class="p">,</span> <span class="nl">curve</span><span class="p">:</span> <span class="p">.</span><span class="n">easeOut</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">interruptableAnimtionView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">interruptableAnimtionView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">offsetBy</span><span class="p">(</span><span class="nl">dx</span><span class="p">:</span> <span class="n">offset</span><span class="p">,</span> <span class="nl">dy</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">interruptableAnimator</span><span class="o">!</span><span class="p">.</span><span class="n">pauseAnimation</span><span class="p">()</span>
</span><span class='line'>        <span class="n">progressWhenInterrupted</span> <span class="o">=</span> <span class="n">interruptableAnimator</span><span class="o">!</span><span class="p">.</span><span class="n">fractionComplete</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">changed</span><span class="p">:</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">translation</span> <span class="o">=</span> <span class="n">gesture</span><span class="p">.</span><span class="n">translation</span><span class="p">(</span><span class="k">in</span><span class="o">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">interruptableAnimtionView</span><span class="p">)</span>
</span><span class='line'>        <span class="n">interruptableAnimator</span><span class="o">!</span><span class="p">.</span><span class="n">fractionComplete</span> <span class="o">=</span> <span class="p">(</span><span class="n">translation</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">offset</span><span class="p">)</span> <span class="o">+</span> <span class="n">progressWhenInterrupted</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">ended</span><span class="p">,</span> <span class="p">.</span><span class="nl">cancelled</span><span class="p">:</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">timing</span> <span class="o">=</span> <span class="n">UICubicTimingParameters</span><span class="p">(</span><span class="nl">animationCurve</span><span class="p">:</span> <span class="p">.</span><span class="n">easeOut</span><span class="p">)</span>
</span><span class='line'>        <span class="n">interruptableAnimator</span><span class="o">!</span><span class="p">.</span><span class="n">continueAnimation</span><span class="p">(</span><span class="nl">withTimingParameters</span><span class="p">:</span> <span class="n">timing</span><span class="p">,</span> <span class="nl">durationFactor</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LayoutMargin & preservesSuperviewLayoutMargins 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2017/08/05/layoutMagrin-preservesSuperviewLayoutMargins-notes/"/>
    <updated>2017-08-05T13:30:56+08:00</updated>
    <id>http://engili.github.io/blog/2017/08/05/layoutMagrin-preservesSuperviewLayoutMargins-notes</id>
    <content type="html"><![CDATA[<!--more-->


<h1>发现问题</h1>

<p>在IB中拖放tableView，大小为设置为屏幕大小后，添加了四个方向的约束，发现，约束的值居然不是和想象中不太一样，不是0。</p>

<p><img src="https://github.com/engili/engili.github.io/raw/master/images/layout_note_1.png" width="547"></p>

<p>接着打开attribute inspector,发现约束信息如下：
<img src="https://github.com/engili/engili.github.io/raw/master/images/layout_note_2.png" width="547"></p>

<p>在这里发现Second Item是superView 的 leading Margin. 而不是superView的leading，所以约束的值不是0，但leading margin又是什么？</p>

<h1>Layout Magrin</h1>

<p>通过查找文档，发现这是iOS 8 以后，UIView 新增的一个属性，layoutMargins. 表示一个View的内边距。</p>

<h2>文档</h2>

<blockquote><p>@property(nonatomic) UIEdgeInsets layoutMargins;
The default spacing to use when laying out content in the view.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="bp">UIEdgeInsets</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">top</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">bottom</span><span class="p">,</span> <span class="n">right</span><span class="p">;</span>  <span class="c1">// specify amount to inset (positive) for each of the edges. values can be negative to &#39;outset&#39;</span>
</span><span class='line'><span class="p">}</span> <span class="bp">UIEdgeInsets</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个属性类似Android中的padding，用于父View设置子View布局的内边距。</p>

<blockquote><p>The default margins are eight points on each side.</p></blockquote>

<p>默认值是8个点，可修改。</p>

<blockquote><p>If the view is a view controller’s root view, the system sets and manages the margins. The top and bottom margins are set to zero points. The side margins vary depending on the current size class, but can be either 16 or 20 points. You cannot change these margins.</p></blockquote>

<p>但如果，是ViewController的rootView，layoutMargins 是系统设置和控制的，不能修改。（文章最开始的tableView到 leading Margin 约束为 -16.就说明，left margin是16点。）</p>

<p>到这里，其实对layoutMargins理解都较为清晰，但是文档中还提到了一个与layoutMargins 相关的属性： preservesSuperviewLayoutMargins</p>

<blockquote><p>When the edge of your view is close to the edge of the superview and the preservesSuperviewLayoutMargins property is YES, the actual layout margins may be increased to prevent content from overlapping the superview’s margins.</p></blockquote>

<p>读完感觉字面意思都懂，但就是不知道是什么意思。</p>

<h1>preservesSuperviewLayoutMargins</h1>

<blockquote><p>@property(nonatomic) BOOL preservesSuperviewLayoutMargins;
A Boolean value indicating whether the current view also respects the margins of its superview.
The default value of this property is NO.</p></blockquote>

<p>一个BOOL值，决定当前View布局是否也考虑父View的layoutMargins.
默认是NO.</p>

<p>到这里还是晕的，没看懂这个属性是干嘛，继续看文档。</p>

<h2>文档</h2>

<blockquote><p>When the value of this property is YES, the superview’s margins are also considered when laying out content. This margin affects layouts where the distance between the edge of a view and its superview is smaller than the corresponding margin.</p></blockquote>

<p>当这个属性是YES的时候，父view的layoutMargins会被考虑到当前View的布局中。也就是说，当前View和父View的内边距，小于父View相应layoutMargins中对应的内边距时，父View的内边距会决定当前View的布局。还是有些抽象。</p>

<blockquote><p> For example, you might have a content view whose frame precisely matches the bounds of its superview. When any of the superview’s margins is inside the area represented by the content view and its own margins, UIKit adjusts the content view’s layout to respect the superview’s margins. The amount of the adjustment is the smallest amount needed to ensure that content is also inside the superview’s margins.</p></blockquote>

<p>这里大概的意思就是，你有一个contentView，它的大小和父View一样大的你设置了contentView的preservesSuperviewLayoutMargins为YES，当你对contentView中的子View进行布局的时候，如果有子View的所在位置（比如：子View到contentView的左边距，小于父View的LayoutMargin 对应的左内边距）UIKit就会对子View进行一些调整。
感觉看了这一段稍微清晰了一些，可是写代码想实现一个demo的时候，发现这个preservesSuperviewLayoutMargins属性好像并没有什么卵用。
最后再Google上搜到了这篇文章。
<a href="https://www.shinobicontrols.com/blog/ios8-day-by-day-day-32-layout-margins">iOS8 Day-by-Day :: Day 32 :: Layout Margins</a></p>

<p>然后自己实现了一个 demo 如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//创建一个红色的View，大小和手机屏幕一样大，</span>
</span><span class='line'>    <span class="c1">//layoutMargin 为（100，100，100，100）</span>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">redView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">redView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">redView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">redView</span><span class="p">.</span><span class="n">layoutMargins</span> <span class="o">=</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">redView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;H:|-(0)-[redView]-(0)-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="n">NSLayoutFormatDirectionLeadingToTrailing</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">redView</span><span class="p">)]];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;V:|-(0)-[redView]-(0)-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="n">NSLayoutFormatDirectionLeadingToTrailing</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">redView</span><span class="p">)]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//创建一个绿色的View，作为我们的ContentView，父View为红色的View</span>
</span><span class='line'>    <span class="c1">//约束为到红色View各边距为10，但红色View 的layoutMargin 还是再绿色View内</span>
</span><span class='line'>    <span class="c1">//设置绿色View preservesSuperviewLayoutMargins 为YES</span>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">greenView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">greenView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">greenColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">greenView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">greenView</span><span class="p">.</span><span class="n">preservesSuperviewLayoutMargins</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">redView</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">greenView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">redView</span> <span class="nl">addConstraints</span><span class="p">:[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;H:|-(10)-[greenView]-(10)-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="n">NSLayoutFormatDirectionLeadingToTrailing</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">greenView</span><span class="p">)]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">redView</span> <span class="nl">addConstraints</span><span class="p">:[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;V:|-(10)-[greenView]-(10)-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="n">NSLayoutFormatDirectionLeadingToTrailing</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">greenView</span><span class="p">)]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//创建一个蓝色View，作为绿色View的子View</span>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">blueView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">blueView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">blueColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">blueView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">greenView</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">blueView</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//注意，leading 约束对应的第二item 属性为 leading.margin</span>
</span><span class='line'>    <span class="p">[</span><span class="n">greenView</span> <span class="nl">addConstraint</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">blueView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeLeading</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">greenView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeLeadingMargin</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">constant</span><span class="p">:</span><span class="mf">0.0</span><span class="p">]];</span>
</span><span class='line'>    <span class="c1">// trailing 属性 为父View trailig - 8.0// 8.0 是默认layout Margin</span>
</span><span class='line'>    <span class="p">[</span><span class="n">greenView</span> <span class="nl">addConstraint</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">blueView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeTrailing</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">greenView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeTrailing</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">constant</span><span class="p">:</span><span class="o">-</span><span class="mf">8.0</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">greenView</span> <span class="nl">addConstraint</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">blueView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeTop</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">greenView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeTop</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">constant</span><span class="p">:</span><span class="mf">0.0</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">greenView</span> <span class="nl">addConstraint</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">blueView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeBottom</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">greenView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeBottom</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">constant</span><span class="p">:</span><span class="mf">0.0</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://github.com/engili/engili.github.io/raw/master/images/layout_note_3.png" width="547"></p>

<h1>总结</h1>

<p>最后总结一下preservesSuperviewLayoutMargins生效的要点：（如果总结的不对希望大家指正~）
1.preservesSuperviewLayoutMargins 只在自动布局情况下生效
2.contentView（设置preservesSuperviewLayoutMargins的View）的父View的LayoutMargin中，至少存在contentView 某一个方向到父View的边距，小于父View LayoutMargin 对应的内边距。（就比如上面栗子中，绿色View到红色View的左边距是10，红色View的LayoutMargin中对应的左内边距为100）
3.设置自动布局约束的时候，一定要设置Margin相关的约束(iOS8以上有效)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">,</span> <span class="n">NSLayoutAttribute</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLayoutAttributeLeftMargin</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeRightMargin</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeTopMargin</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeBottomMargin</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeLeadingMargin</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeTrailingMargin</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeCenterXWithinMargins</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeCenterYWithinMargins</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h1>思考</h1>

<p>现在基本上弄清楚了，LayoutMargin和preservesSuperviewLayoutMargins属性，以及如何使用，但是对他们在自动布局的实际使用场景还是没有思考太清楚，没有明白苹果为什么会设置这两个属性，特别是preservesSuperviewLayoutMargins属性。 = =</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Tips]]></title>
    <link href="http://engili.github.io/blog/2017/05/14/ios-tips/"/>
    <updated>2017-05-14T06:58:24+08:00</updated>
    <id>http://engili.github.io/blog/2017/05/14/ios-tips</id>
    <content type="html"><![CDATA[<!--more-->


<h3>1.在block执行期间，weak引用强持有</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">__weak</span> <span class="k">typedef</span><span class="p">(</span><span class="n">someClass</span><span class="p">)</span> <span class="n">weakClass</span> <span class="o">=</span> <span class="n">someClass</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">xxx</span> <span class="nl">setHandler</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span><span class="p">(</span><span class="n">someClass</span><span class="p">)</span> <span class="n">strongClass</span> <span class="o">=</span> <span class="n">weakClass</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">strongClass</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>为了避免强引用环，在使用闭包时，一些引入的对象，都使用不增加引用计数的weak指针持有，但当使用的时候，为了避免对象被提前释放，可以用strong指针持有，可以确保在使用该对象的时候，不会被释放。
注：</li>
<li>使用不带修饰的指针变量，默认是带有<code>__strong</code>修饰</li>
</ul>


<h3>2. UISwitch 重复触发action方法</h3>

<p>理论上，只用当用户点击了UISwitch,才会触发，<code>vauleChange</code> 的action方法
但是实际开发中，发现iOS10机型上，如果在action方法里调用了<code>-setOn:animated:</code>或者<code>setOn:</code> ，就会多触发一次action方法。</p>

<h4>解决方案</h4>

<ol>
<li>避免在valueChange方法里调用<code>-setOn:animated:</code>或<code>setOn:</code></li>
<li>如果无法避免，使用<code>dispatch_async</code>,在主队列执行这些方法（这个方法有个缺点，比较卡的手机会看到闪动的现象）</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">valueChanged:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>       <span class="p">[</span><span class="n">sender</span> <span class="nl">setOn</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.iOS 10 以下机型不会出现这个问题，iOS11 待验证</p>

<h4>参考</h4>

<p><a href="https://stackoverflow.com/questions/39566361/uiswitch-seton-animated-does-not-work-as-document">UISwitch setOn(:, animated:) does not work as document</a></p>

<h3>3.Xcode8 生成CoreData NSManagedObject 报Duplicate symbol error</h3>

<p>上周写CoreData的时候，当使用Editor的Create NSManagedObject SubClass 生成好对应Entity的ManagedObject后，编译的时候报Duplicate symbol error，意思是符号重复定义的错误，一脸蒙蔽好吧，都是系统生成的，我什么都没有做=。=</p>

<p>然后网上搜了一下，搜到了问题的原因和解决方案
<a href="http://stackoverflow.com/questions/40460307/duplicate-symbol-error-when-adding-nsmanagedobject-subclass-duplicate-link">duplicate-symbol-error-when-adding-nsmanagedobject-subclass-duplicate-link</a>
<a href="http://stackoverflow.com/questions/38409074/xcode-beta-8-cant-create-core-data/38413941#38413941">xcode-beta-8-cant-create-core-data</a></p>

<h3>原因</h3>

<p>Xcode 8 的.xcdatamodeId 文件会自动生成那些Entity的类，当你在Editor->Create NSManagedObject SubClass 再次生成这些Entity类的时候，编译的时候，就会有符号重定义的错误</p>

<h3>解决方案</h3>

<ul>
<li>当你不需要自己修改NSManagedObject 文件时候，就使用Xcode生成的文件，直接引用头文件就好。</li>
<li>当你需要自己修改NSManagedObject 文件，在Xcode中选中.xcdatamodeId 文件 在右侧属性栏中， <del>把Tools Version 修改成小于8.0的版本 ，然后就可以使用Editor 生成NSManagedObject类了。</del> 修改Entity Inspector 里Class对应的Codegen
如下图：</li>
</ul>


<p><img src="https://github.com/engili/engili.github.io/raw/master/images/ios-tips-01.png" width="547"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Static定义常量和变量总结]]></title>
    <link href="http://engili.github.io/blog/2017/03/10/oc-static/"/>
    <updated>2017-03-10T20:48:13+08:00</updated>
    <id>http://engili.github.io/blog/2017/03/10/oc-static</id>
    <content type="html"><![CDATA[<!--more-->


<h3>1. <code>.m</code> 文件里定义static 常量</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// .m</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kConstant</span> <span class="o">=</span> <span class="n">xxx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="err">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>该文件里全局可见 (准确说应该是compilation unit，而不是文件)</li>
<li>外部文件不能通过<code>extern</code>引用</li>
</ul>


<h3>2. <code>.m</code> 文件里定义static 变量</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// .m</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">intVar</span> <span class="o">=</span> <span class="n">xxx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="err">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .h</span>
</span><span class='line'><span class="c1">//实现类似类变量的机制</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">intVar</span><span class="p">;</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setIntVar:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">intVar</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>OC里没有类变量的概念，但通过静态的全局变量，可以实现类似类变量的东西

<ul>
<li>因为一般情况下，OC里的类以文件为单位，划分。通过给类添加，get 和 set的类方法，去实际操作这个全局变量，就可以实现类似类变量的机制。</li>
</ul>
</li>
<li>外部文件不能通过extern引用</li>
</ul>


<h3>3. <code>.h</code> 里定义static 常量</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// .h</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kConstatnt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/a/92641/4635964">Variable declarations in header files - static or not?</a></p>

<blockquote><p>这里static，意味着，每一个包含这个头文件的源文件里，会包含一个这个常量的拷贝，但与此同时，链接时，并不会出现符号冲定义的错误。</p></blockquote>

<ul>
<li>外部文件，可以通过引用该头文件，使用这个全局常量，但这里获得的是该常量的一份，拷贝，因为常量并不能修改，所以获取的是拷贝，也没有太多问题</li>
<li>如果这里，去掉这个static，外部文件引用这个头文件，就会出现符号重定义的链接错误</li>
<li>但是这种实现全局常量的方式不太好</li>
</ul>


<h3>4. <code>.h</code> 里定义static 变量</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// .h</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">intVar</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这里同在<code>.h</code>里定义static 常量一样，每一个引用该头文件的源文件，获取到的是这个变量的一份拷贝，也就是说你在不同的文件里，修改这个变量，都是修改当前文件里的一份拷贝，只会在当前这个文件范围里生效</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// a.h </span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">//定义了一个全局变量</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">A</span>: <span class="bp">NSObject</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">printA</span><span class="p">;</span> <span class="c1">//打印a的值</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// a.m</span>
</span><span class='line'><span class="k">@implementation</span>
</span><span class='line'><span class="err">+ (</span><span class="nc">void</span><span class="p">)</span><span class="n">printA</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="c1">// b.h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">B</span>: <span class="bp">NSObject</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">printA</span><span class="p">;</span> <span class="c1">//打印a的值</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// b.m </span>
</span><span class='line'><span class="cp">#import &quot;a.h&quot; </span><span class="c1">//引入了全局变量 a</span>
</span><span class='line'><span class="k">@implementation</span>
</span><span class='line'><span class="err">+ (</span><span class="nc">void</span><span class="p">)</span><span class="n">printA</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="c1">// main.m</span>
</span><span class='line'><span class="p">[</span><span class="n">A</span> <span class="n">printA</span><span class="p">];</span>  <span class="c1">// 1 </span>
</span><span class='line'><span class="p">[</span><span class="n">B</span> <span class="n">printA</span><span class="p">];</span>  <span class="c1">// 2</span>
</span><span class='line'><span class="p">[</span><span class="n">A</span> <span class="n">printA</span><span class="p">];</span>  <span class="c1">// 1</span>
</span><span class='line'><span class="p">[</span><span class="n">B</span> <span class="n">printA</span><span class="p">];</span>  <span class="c1">// 3</span>
</span><span class='line'><span class="p">[</span><span class="n">A</span> <span class="n">printA</span><span class="p">];</span>  <span class="c1">// 1</span>
</span><span class='line'><span class="p">[</span><span class="n">B</span> <span class="n">printA</span><span class="p">];</span>  <span class="c1">// 4</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>所以这种方式，定义的变量，并不是真正的全局变量。</li>
</ul>


<h3>5.更优雅的方式，定义全局变量和全局常量</h3>

<ul>
<li>在<code>.m</code>文件里，定义全局变量，和全局常量，不用static修饰</li>
<li>在<code>.h</code>文件里，用extern声明这些全局变量和全局</li>
<li>其他文件引用这个<code>.h</code>来使用相应的常量和变量。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// .m</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .h</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
