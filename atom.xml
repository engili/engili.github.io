<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Octopress Blog]]></title>
  <link href="http://engili.github.io/atom.xml" rel="self"/>
  <link href="http://engili.github.io/"/>
  <updated>2018-08-04T17:48:46+08:00</updated>
  <id>http://engili.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UIKit Animations 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/03/24/uikit-animations-note/"/>
    <updated>2018-03-24T21:33:48+08:00</updated>
    <id>http://engili.github.io/blog/2018/03/24/uikit-animations-note</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>UIKit Animations 学习笔记</h3>

<h4>1. UIView 可动画属性 (Animatable Property)</h4>

<ul>
<li>frame

<ul>
<li>当transform 属性不为identity时，frame是未定义的，使用bounds或center做动画</li>
</ul>
</li>
<li>bounds</li>
<li>center</li>
<li>transform</li>
<li>alpha</li>
<li>backgroundColor</li>
<li><del>contentStretch (iOS 7.0弃用）</del>

<ul>
<li><del>Modify this property to change the way the view’s contents are stretched to fill the available space.</del></li>
</ul>
</li>
</ul>


<h4>2. Animations Block-Based Methods</h4>

<p><code>class func animate(withDuration duration: TimeInterval, animations: @escaping () -&gt; Void)</code>
- 这个方法使用curveEaseInOut和transitionNone选项，动画期间动画的View不响应用户交互</p>

<p><code>class func animate(withDuration duration: TimeInterval, animations: @escaping () -&gt; Void, completion: ((Bool) -&gt; Void)? = nil)</code>
- completion,如果duration值是0，block会在下一个runloop cycle被调用</p>

<p><code>class func animate(withDuration duration: TimeInterval, delay: TimeInterval, options: UIViewAnimationOptions = [], animations: @escaping () -&gt; Void, completion: ((Bool) -&gt; Void)? = nil)</code>
- options 可以设置一个或者多个，以数组的形式</p>

<h5>2.1 UIViewAnimationOptions</h5>

<h6>2.1.1 常规属性（可以设置多个）</h6>

<ul>
<li>layoutSubviews

<ul>
<li>layout子View，让他们随父view一起动画
必须重写view的LayoutSubViews方法</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//  MTAnimateView.swift</span>
</span><span class='line'><span class="k">class</span> <span class="nl">MTAnimateView</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">subview</span><span class="p">:</span> <span class="bp">UIView</span><span class="o">!</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">bounds</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>        <span class="n">subview</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">bounds</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="n">bounds</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//UIViewController.swift</span>
</span><span class='line'><span class="k">class</span> <span class="nl">ViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">redView</span><span class="p">:</span> <span class="n">MTAnimateView</span><span class="o">!</span>
</span><span class='line'>    <span class="c1">//动画block 扩大bounds，长宽各100，不带`layoutSubviews` 动画效果就很奇怪</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">animateWithLayoutSubViews</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">orginBounds</span> <span class="o">=</span> <span class="n">redView</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>        <span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">layoutSubviews</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">bounds</span> <span class="o">=</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="n">orginBounds</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">orginBounds</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">orginBounds</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="n">orginBounds</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">bounds</span> <span class="o">=</span> <span class="n">orginBounds</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>allowUserInteraction

<ul>
<li>响应动画时的用户交互</li>
</ul>
</li>
<li>beginFromCurrentState

<ul>
<li>If this key is not present, all in-flight animations are allowed to finish before the new animation is started. If another animation is not in flight, this key has no effect.</li>
</ul>
</li>
<li>`repeat`

<ul>
<li>重复动画</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">repeat</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//重复执行3次</span>
</span><span class='line'>            <span class="bp">UIView</span><span class="p">.</span><span class="n">setAnimationRepeatCount</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>autoreverse

<ul>
<li>与repeat配合使用，动画能回溯</li>
</ul>
</li>
<li>overrideInheritedDuration

<ul>
<li>忽略嵌套动画的时间,使用自己设置的duration</li>
</ul>
</li>
<li><p>overrideInheritedCurve</p>

<ul>
<li>忽略嵌套动画的时间曲线，使用自己设置的时间曲线</li>
</ul>


<p>  嵌套动画</p>

<pre><code class="``swift">  UIView.animate(withDuration: 2.0, delay: 0.0, options: .curveEaseIn, animations: {
      self.redView.center = redViewNewCenter
      UIView.animate(withDuration: 0.5, delay: 0.0, options: [.curveEaseOut, .overrideInheritedDuration, .overrideInheritedCurve], animations: {
          self.blueView.center = blueViewNewCenter
      }, completion: { (_) in
          self.blueView.center = blueViewOriginalCenter
      })
  }) { (_) in
      self.redView.center = redViewOriginalCenter
}
</code></pre></li>
<li><p>allowAnimatedContent</p>

<ul>
<li>动画的时候，重绘View，没设置这个选项的时候，动画都是使用的截图</li>
</ul>
</li>
<li><p>showHideTransitionViews</p>

<ul>
<li>用于转场动画
When present, this key causes views to be hidden or shown (instead of removed or added) when performing a view transition. Both views must already be present in the parent view’s hierarchy when using this key. If this key is not present, the to-view in a transition is added to, and the from-view is removed from, the parent view’s list of subviews.</li>
</ul>
</li>
<li><p>overrideInheritedOptions</p></li>
</ul>


<h6>2.1.2 速度属性（可以设置一个）</h6>

<ul>
<li>curveEaseInOut

<ul>
<li>开始慢，中间加速，结尾慢</li>
</ul>
</li>
<li>curveEaseIn

<ul>
<li>开始慢，一直加速</li>
</ul>
</li>
<li>curveEaseOut

<ul>
<li>开始快，一直减速</li>
</ul>
</li>
<li>curveLinear

<ul>
<li>均匀的</li>
</ul>
</li>
</ul>


<h6>2.1.3 转场动画属性 （可以设置一个）</h6>

<ul>
<li>transitionFlipFromLeft</li>
<li>transitionFlipFromRight</li>
<li>transitionCurlUp</li>
<li>transitionCurlDown</li>
<li>transitionCrossDissolve</li>
<li>transitionFlipFromTop</li>
<li>transitionFlipFromBottom</li>
<li>preferredFramesPerSecond30</li>
<li>preferredFramesPerSecond60</li>
</ul>


<h4>3. 嵌套动画</h4>

<p>嵌套动画，是嵌套在其他动画block中的动画，他开始动画的时间和他父动画一样，并且继承父动画的时间，时间曲线和其他动画配置。 可以通过overrideInheritedDuration、overrideInheritedCurve 来使用自己的配置做动画</p>

<h4>4.转场动画 (动画效果比较浮夸，用的较少)</h4>

<p><code>class func transition(with view: UIView, duration: TimeInterval, options: UIViewAnimationOptions = [], animations: (() -&gt; Void)?, completion: ((Bool) -&gt; Void)? = nil)</code>
- 在view中进行转场动画
- 在animations中可以add、remove、hide、show view，如果想要其他动画效果，需要配置allowAnimatedContent
示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIView</span><span class="p">.</span><span class="n">transition</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">redView</span><span class="p">,</span> <span class="nl">duration</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">transitionFlipFromLeft</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">greenView</span><span class="p">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">blueView</span><span class="p">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>class func transition(from fromView: UIView, to toView: UIView, duration: TimeInterval, options: UIViewAnimationOptions = [], completion: ((Bool) -&gt; Void)? = nil)</code></p>

<ul>
<li>这个方法，从fromView转场到toView</li>
<li>系统实现是直接从视图层级中移除，可以使用 showHideTransitionViews 只是显示和隐藏两个view</li>
</ul>


<h4>5.UIViewPropertyAnimator</h4>

<h5>5.1.1 构造方法</h5>

<p><code>convenience init(duration: TimeInterval, curve: UIViewAnimationCurve, animations: (() -&gt; Void)? = nil)</code></p>

<ul>
<li>构造函数 创建出的animator是inactive状态</li>
<li>需要调用startAnimation()开始动画</li>
</ul>


<h5>5.1.2 添加动画</h5>

<p><code>func addAnimations(_ animation: @escaping () -&gt; Void)
</code></p>

<ul>
<li>可以通过这个方法，添加多个动画block</li>
<li>inactive 状态下，添加的动画，进行时间是配置的时间，active状态下，添加的动画，进行的时间，是animtor剩余的时间</li>
<li>stopped状态下，添加动画，会报错</li>
</ul>


<h5>5.1.3 添加动画结束回调</h5>

<p><code>func addCompletion(_ completion: @escaping (UIViewAnimatingPosition) -&gt; Void)</code></p>

<ul>
<li>动画正常结束时，执行回调</li>
<li>调用<code>stopAnimation(_:)</code> 参数设置true,执行回调</li>
<li>调用<code>stopAnimation(_:)</code> 参数设置false,在<code>finishAnimation(at:)</code>调用后，执行回调</li>
</ul>


<h5>5.1.4 continueAnimation</h5>

<p>调整一个暂停动画的 时间函数 和 时间</p>

<p><code>
func continueAnimation(withTimingParameters parameters: UITimingCurveProvider?, durationFactor: CGFloat)
</code>
- 调用该方法，需要animtor处于active且暂停的状态
- 当状态处于非active,或动画正在进行，或者 isInterruptible属性是false时 会报错
- parameters: 新的时间函数，但是为了避免，动画有跳动的现象，一般改变时间函数后，会有一定的过渡效果
- durationFactor: 时间乘法因子，和原有的时间，相乘，获取最终的时间
- 当这次动画结束后，才会重写animator的timing和duration属性</p>

<h5>5.2 UIViewAnimating</h5>

<h6>5.2.1 UIViewAnimating</h6>

<ul>
<li>inactive

<ul>
<li>构造方法创建的animator初始状态</li>
</ul>
</li>
<li>active

<ul>
<li>当调用startAnimation() 或 pauseAnimation() 后，处于这个状态</li>
</ul>
</li>
<li>stopped

<ul>
<li>动画自然结束，或者调用stopAnimation(_:)</li>
<li>调用stopAnimation(_:),会让动画停留在当前值，而不是最终动画设定的值</li>
</ul>


<p>  <img src="https://github.com/engili/engili.github.io/raw/master/images/animation_states_2x.png" alt="" /></p></li>
</ul>


<h6>5.2.2 UIViewAnimatingPosition</h6>

<ul>
<li>end</li>
<li>start</li>
<li>current</li>
</ul>


<h6>5.2.3 动画状态改变</h6>

<ul>
<li>startAnimation()

<ul>
<li>开始一个动画，或者恢复一个暂停的动画</li>
<li>stopped状态的动画，不能调用该方法</li>
</ul>
</li>
<li>pauseAnimation()

<ul>
<li>暂停动画</li>
<li>inactive动画调用后，转为active状态，并且动画处于暂停状态</li>
</ul>
</li>
<li>stopAnimation(_:) 使动画，在当前状态停止</li>
</ul>


<p><code>func stopAnimation(_ withoutFinishing: Bool)</code></p>

<ul>
<li>withoutFinishing:

<ul>
<li>设置为true,animator进入inactive状态</li>
<li>设置为false,animator进入stopped状态，之后可以进行一些其他操作，</li>
</ul>
</li>
<li>finishAnimation(at:)使得动画结束，animator回到inactive</li>
</ul>


<h6>5.2.4 可交互动画</h6>

<ul>
<li>fractionComplete

<ul>
<li>动画完成百分比</li>
<li>通过修改这个值，可以使animator进行到相应的过程</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">objc</span> <span class="n">fileprivate</span> <span class="k">func</span> <span class="n">handleInterruptableGesture</span><span class="p">(</span><span class="n">_</span> <span class="nl">gesture</span><span class="p">:</span> <span class="bp">UIPanGestureRecognizer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">offset</span> <span class="o">=</span> <span class="bp">UIScreen</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">100</span>
</span><span class='line'>    <span class="k">switch</span> <span class="n">gesture</span><span class="p">.</span><span class="n">state</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">began</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">interruptableAnimator</span> <span class="o">==</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">interruptableAnimator</span> <span class="o">=</span> <span class="n">UIViewPropertyAnimator</span><span class="p">(</span><span class="nl">duration</span><span class="p">:</span> <span class="mf">3.0</span><span class="p">,</span> <span class="nl">curve</span><span class="p">:</span> <span class="p">.</span><span class="n">easeOut</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nb">self</span><span class="p">.</span><span class="n">interruptableAnimtionView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">interruptableAnimtionView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">offsetBy</span><span class="p">(</span><span class="nl">dx</span><span class="p">:</span> <span class="n">offset</span><span class="p">,</span> <span class="nl">dy</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">interruptableAnimator</span><span class="o">!</span><span class="p">.</span><span class="n">pauseAnimation</span><span class="p">()</span>
</span><span class='line'>        <span class="n">progressWhenInterrupted</span> <span class="o">=</span> <span class="n">interruptableAnimator</span><span class="o">!</span><span class="p">.</span><span class="n">fractionComplete</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="nl">changed</span><span class="p">:</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">translation</span> <span class="o">=</span> <span class="n">gesture</span><span class="p">.</span><span class="n">translation</span><span class="p">(</span><span class="k">in</span><span class="o">:</span> <span class="nb">self</span><span class="p">.</span><span class="n">interruptableAnimtionView</span><span class="p">)</span>
</span><span class='line'>        <span class="n">interruptableAnimator</span><span class="o">!</span><span class="p">.</span><span class="n">fractionComplete</span> <span class="o">=</span> <span class="p">(</span><span class="n">translation</span><span class="p">.</span><span class="n">x</span> <span class="o">/</span> <span class="n">offset</span><span class="p">)</span> <span class="o">+</span> <span class="n">progressWhenInterrupted</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">ended</span><span class="p">,</span> <span class="p">.</span><span class="nl">cancelled</span><span class="p">:</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">timing</span> <span class="o">=</span> <span class="n">UICubicTimingParameters</span><span class="p">(</span><span class="nl">animationCurve</span><span class="p">:</span> <span class="p">.</span><span class="n">easeOut</span><span class="p">)</span>
</span><span class='line'>        <span class="n">interruptableAnimator</span><span class="o">!</span><span class="p">.</span><span class="n">continueAnimation</span><span class="p">(</span><span class="nl">withTimingParameters</span><span class="p">:</span> <span class="n">timing</span><span class="p">,</span> <span class="nl">durationFactor</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreData 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2017/08/20/coredata-note/"/>
    <updated>2017-08-20T18:41:18+08:00</updated>
    <id>http://engili.github.io/blog/2017/08/20/coredata-note</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>CoreData 学习笔记</h3>

<h4>1.Core Data Stack</h4>

<h5>iOS 10 以前创建CoreDataStack</h5>

<h6>1 Data Model</h6>

<p>Data Model 是Xcode提供的一个可视化Model 编辑器，可以创建实例，定义实例属性，定义实例之间的关系，以及创建一些常用的FetchRequst</p>

<h6># 1.1 新建DataModel 文件</h6>

<p><img src="https://github.com/engili/engili.github.io/raw/master/images/coredata-notes-01.png" alt="" /></p>

<h6># 1.2 添加实例&amp;定义属性</h6>

<p><img src="https://github.com/engili/engili.github.io/raw/master/images/coredata-notes-02.png" alt="" /></p>

<h6>## 1.21 属性类型（Attribute Type）</h6>

<ul>
<li>Integer16 Integer32 Integer64</li>
<li>Decimal Float Double</li>
<li>String</li>
<li>Boolean</li>
<li>Date</li>
<li>Binary Data</li>
<li>Transformable</li>
</ul>


<p>其中，<code>Binary Data</code> 为二进制数据，在Xcode右侧Model Inspector 中，有一个可以设置Allows External Storage的选项，CoreData会智能选择是存储文件的二进制数据，还是存储文件URL</p>

<p><code>Transformable</code> 可以为任意遵循NSCoding协议的对象类型</p>

<h6># 1.3 添加关系（relationShip）</h6>

<ul>
<li>to one （一对一）</li>
<li>to Manay （一对多）</li>
</ul>


<p>这里再定义一个实例，主人（master），设定主人和狗子的关系为一对多，关系图如下：</p>

<p><img src="https://github.com/engili/engili.github.io/raw/master/images/coredata-notes-03.png" alt="" /></p>

<h6>2 CoreDataStack</h6>

<p>CoreDataStck，是自定义的一个CoreData 的栈对象，为一个单例，可以通过它，初始化项目的CoreData，以及获取到Context，对数据库进行增删改查等操作</p>

<h6># 2.1 单例</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//  CoreDataStack.h</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;CoreData/CoreData.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">CoreDataStack</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">sharedInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//  CoreDataStack.m</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#import &quot;CoreDataStack.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">CoreDataStack</span>
</span><span class='line'>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">sharedInstance</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">CoreDataStack</span> <span class="o">*</span><span class="n">stack</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">stack</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CoreDataStack</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h6>3 NSManagedModel</h6>

<p>The NSManagedObjectModel represents each object type in your app’s data model, the properties they can have, and the relationship between them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//  CoreDataStack.m</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">CoreDataStack</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSManagedObjectModel</span> <span class="o">*</span><span class="n">managedModel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="p">......</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="bp">NSManagedObjectModel</span> <span class="o">*</span><span class="p">)</span><span class="n">managedModel</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_managedModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSURL</span> <span class="o">*</span><span class="n">momdURL</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span><span class="nl">URLForResource</span><span class="p">:</span><span class="s">@&quot;Model&quot;</span> <span class="nl">withExtension</span><span class="p">:</span><span class="s">@&quot;momd&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_managedModel</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSManagedObjectModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfURL</span><span class="p">:</span><span class="n">momdURL</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_managedModel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>4 NSPersistentStoreCoordinator</h6>

<h6># 4.1 NSpersistentStore</h6>

<h6>## atomic vs nonatomic</h6>

<p>An atomic persistent store needs to be completely deserialized and loaded into memory before you can make any read or write operations. In contrast, a non- atomic persistent store can load chunks of itself onto memory as needed.</p>

<h6>## type</h6>

<ul>
<li>NSSQLiteStoreType (nonatomic)</li>
<li>NSXMLStoreType (atomic)</li>
<li>NSBinaryStoreType (atomic)</li>
<li>NSInMemoryStoreType (atomic)</li>
</ul>


<h6># 4.2 NSPersistentStoreCoordinator</h6>

<p>the bridge between the managed object model and the persistent store</p>

<ul>
<li>通过managed object model初始化</li>
<li>通过addPersistentStoreWithType:configuration:URL:options:error: 添加persistent store</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//  CoreDataStack.m</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">CoreDataStack</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="bp">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="n">psc</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="p">......</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="bp">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="p">)</span><span class="n">psc</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_psc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_psc</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSPersistentStoreCoordinator</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithManagedObjectModel</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">managedModel</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">NSURL</span> <span class="o">*</span><span class="n">URL</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">self</span> <span class="n">documentURL</span><span class="p">]</span> <span class="nl">URLByAppendingPathComponent</span><span class="p">:</span><span class="s">@&quot;Model.sqlite&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">_psc</span> <span class="nl">addPersistentStoreWithType</span><span class="p">:</span><span class="n">NSSQLiteStoreType</span> <span class="nl">configuration</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">URL</span><span class="p">:</span><span class="n">URL</span> <span class="nl">options</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;addPersistentStoreWithType Error: %@&quot;</span><span class="p">,[</span><span class="n">error</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_psc</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="bp">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="n">documentURL</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[[</span><span class="bp">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="nl">URLsForDirectory</span><span class="p">:</span><span class="n">NSDocumentDirectory</span> <span class="nl">inDomains</span><span class="p">:</span><span class="n">NSUserDomainMask</span><span class="p">]</span> <span class="n">firstObject</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>5 NSManagedObjectContext</h6>

<p>Context是唯一暴露给外界，供外界使用的接口</p>

<ul>
<li>context an in-memory scratchpad for managed objects.</li>
<li>any change you make won’t affect the underlying data on disk until you call -save: of context</li>
<li>context manages the lifecycle of the objects that it creates or fetches.</li>
<li>A managed object cannot exist without an associated context.</li>
<li>once a managed object has associated with a particular context, it will remain associated with the same context for the duration of its lifecycle.</li>
<li>context and managed object is not thread safe</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//  CoreDataStack.h</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">CoreDataStack</span> : <span class="bp">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="n">managedContext</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">//  CoreDataStack.m</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">CoreDataStack</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">strong</span><span class="p">,</span> <span class="k">readwrite</span><span class="p">)</span> <span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="n">managedContext</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="p">)</span><span class="n">managedContext</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_managedContext</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_managedContext</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSManagedObjectContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithConcurrencyType</span><span class="p">:</span><span class="n">NSMainQueueConcurrencyType</span><span class="p">];</span>
</span><span class='line'>        <span class="n">_managedContext</span><span class="p">.</span><span class="n">persistentStoreCoordinator</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">psc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_managedContext</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>6 Save Context</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">saveContext</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">managedContext</span> <span class="n">hasChanges</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">managedContext</span> <span class="nl">save</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;NSManagedObjectContext Save Error: %@&quot;</span><span class="p">,[</span><span class="n">error</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>iOS 10 以后创建CoreDataStack</h5>

<p>iOS 10 以后，苹果系统为我们封装了一个CoreData Stack 的类，叫NSPersistentContainer,可以通过它的属性viewContext获取到NSManagedObjectContext</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">,</span> <span class="k">strong</span><span class="p">)</span> <span class="n">NSPersistentContainer</span> <span class="o">*</span><span class="n">persistentContainer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="n">NSPersistentContainer</span> <span class="o">*</span><span class="p">)</span><span class="nf">persistentContainer</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// The persistent container for the application. This implementation creates and returns a container, having loaded the store for the application to it.</span>
</span><span class='line'>    <span class="k">@synchronized</span> <span class="p">(</span><span class="nb">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">_persistentContainer</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">_persistentContainer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSPersistentContainer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithName</span><span class="p">:</span><span class="s">@&quot;testCoreData&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">_persistentContainer</span> <span class="nl">loadPersistentStoresWithCompletionHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">NSPersistentStoreDescription</span> <span class="o">*</span><span class="n">storeDescription</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>                    <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.</span>
</span><span class='line'>
</span><span class='line'>                    <span class="cm">/*</span>
</span><span class='line'><span class="cm">                     Typical reasons for an error here include:</span>
</span><span class='line'><span class="cm">                     * The parent directory does not exist, cannot be created, or disallows writing.</span>
</span><span class='line'><span class="cm">                     * The persistent store is not accessible, due to permissions or data protection when the device is locked.</span>
</span><span class='line'><span class="cm">                     * The device is out of space.</span>
</span><span class='line'><span class="cm">                     * The store could not be migrated to the current model version.</span>
</span><span class='line'><span class="cm">                     Check the error message to determine what the actual problem was.</span>
</span><span class='line'><span class="cm">                    */</span>
</span><span class='line'>                    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Unresolved error %@, %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">userInfo</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">abort</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_persistentContainer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">saveContext</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">persistentContainer</span><span class="p">.</span><span class="n">viewContext</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">context</span> <span class="n">hasChanges</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">[</span><span class="n">context</span> <span class="nl">save</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Replace this implementation with code to handle the error appropriately.</span>
</span><span class='line'>        <span class="c1">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Unresolved error %@, %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">error</span><span class="p">.</span><span class="n">userInfo</span><span class="p">);</span>
</span><span class='line'>        <span class="n">abort</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.创建NSManagedObject对象</h4>

<p>可视化Data Model文件在程序中，对应了NSManagedModel对象，这些Entity在程序中，所对应的对象就是NSManagedObject (当然其实并不完全对等，可以先这么理解)</p>

<h5>Document</h5>

<blockquote><p>NSManagedObject is a generic class that implements all the basic behavior required of a Core Data model object. It is not possible to use instances of direct subclasses of NSObject (or any other class not inheriting from NSManagedObject) with a managed object context. You may create custom subclasses of NSManagedObject, although this is not always required. If no custom logic is needed, a complete Object graph can be formed with NSManagedObject instances.</p></blockquote>

<p>这里大概有三个要点</p>

<ul>
<li>NSManagedObject 代表了Data Model中的对象</li>
<li>NSManagedObject 需要和 NSManagedObjectContext 结合使用才有意义</li>
<li>NSManagedObject 满足所有你自定义的model 对象需求，通过KVC 去访问相应的属性</li>
</ul>


<h5>生成NSManagedObject子类</h5>

<p>虽然通过KVC就可以访问NSManagedObject所有的属性，但这样使用起来不是很方便。</p>

<p>在Xcode Data Model Editor 中选中你要创建NSManagedObject子类的实例，在右侧Data Model Inspector中选择Codegen</p>

<p><img src="https://github.com/engili/engili.github.io/raw/master/images/coredata-notes-04.png" alt="" /></p>

<ul>
<li>Manual/None

<ul>
<li>Manual/None is the default, and previous behavior; in this case you should implement your own subclass or use NSManagedObject.</li>
</ul>
</li>
</ul>


<p>这个是iOS10以前的默认行为，需要我们手动通过Xcode Editor-> Create NSManagedObject SubClass&hellip; 生成ClassName+CoreDataClass 文件以及 ClassName+CoreDataGeneratedProperties 其中前者，是类的定义，以及类行为定义，后者通过category 定义了类的属性（注：Objective-C中Category定义属性不支持生成成员变量，但可以生成get set 方法，CoreData属性通过@dynamic修饰，表示，运行时生成 get set 方法）</p>

<p>当每次修改，data model的时候，重新通过以上方法，生成NSManagedObject对象，系统只会覆盖ClassName+CoreDataGeneratedProperties文件，而不会修改ClassName+CoreDataClass 文件。
- Category/Extension.
    - Category/Extension generates a class extension in a file named like ClassName+CoreDataGeneratedProperties. You need to declare/implement the main class (if in Obj-C, via a header the extension can import named ClassName.h).</p>

<p>一般情况下，因为我们不需要修改属性Category的定义，而只需要修改类行为的定义，所以这个选项，就直接不对开发者暴露Category 文件，当你修改了DataModel的时候，就可以自动同步最新的代码
- Class Definition</p>

<pre><code>- Class Definition generates subclass files named like ClassName+CoreDataClass as well as the files generated for Category/Extension.
</code></pre>

<p>当我们也不需要为NSManagedObject定义行为的时候，我们就可以选中这个选项，然后直接在项目里引用头文件就可以直接使用。</p>

<h5>数据库 增删改查</h5>

<h6>增</h6>

<p>增加一个数据库对象，首先，需要创建一个NSEntityDescription,前面说 Data Model Editor 里的实例并不完全和NSManagedObject对等，就是因为创建NSManagedObject对象，还需要entity相关的描述对象，这个对象才与实例对等。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="bp">NSEntityDescription</span> <span class="o">*</span><span class="n">entity</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSEntityDescription</span> <span class="nl">entityForName</span><span class="p">:</span><span class="s">@&quot;Doge&quot;</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span><span class="n">_context</span><span class="p">];</span>
</span><span class='line'><span class="n">Doge</span> <span class="o">*</span><span class="n">doge</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Doge</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithEntity</span><span class="p">:</span><span class="n">entity</span> <span class="nl">insertIntoManagedObjectContext</span><span class="p">:</span><span class="n">_context</span><span class="p">];</span>
</span><span class='line'><span class="n">doge</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">@&quot;xxx&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">//注意，这里并没有实际把对象存入数据库，实际存入需要调用NSManagedObjectContext 的save:方法</span>
</span><span class='line'><span class="p">[</span><span class="n">_context</span> <span class="nl">save</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h6>改</h6>

<p>直接访问NSManagedObject属性的set方法，就可以修改属性，同时，也只有当调用了NSManagedObjectContext 的-save:方法后才能存入实际的存储文件中</p>

<h6>删</h6>

<p>删除调用NSManagedObjectContext的-deleteObject:方法，然后调用-save:方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">Doge</span> <span class="o">*</span><span class="n">doge</span> <span class="o">=</span> <span class="p">...</span>
</span><span class='line'> <span class="p">[</span><span class="n">_context</span> <span class="nl">deleteObject</span><span class="p">:</span><span class="n">doge</span><span class="p">];</span>
</span><span class='line'> <span class="p">[</span><span class="n">_context</span> <span class="nl">save</span><span class="p">:</span><span class="nb">nil</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h6>查</h6>

<h6># 1. NSFetchRequest</h6>

<h6>## resultType</h6>

<ul>
<li>NSManagedObjectResultType</li>
<li>NSCountResultType</li>
<li>NSDictionaryResultType</li>
<li>NSManagedObjectIDResultType</li>
</ul>


<p>其中默认属性为<code>NSManagedObjectResultType</code></p>

<h6>## NSManagedObjectResultType</h6>

<p>NSManagedObjectResultType是NSFetchRequest 的默认属性，执行查询后，数组里每个元素，就是NSFetchRequest 对应的NSManagedObject对象。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="bp">NSFetchRequest</span> <span class="o">*</span><span class="n">fetchRequest</span> <span class="o">=</span>  <span class="p">[</span><span class="bp">NSFetchRequest</span> <span class="nl">fetchRequestWithEntityName</span><span class="p">:</span><span class="s">@&quot;Doge&quot;</span><span class="p">];</span>
</span><span class='line'><span class="c1">//默认就为NSManagedObjectResultType</span>
</span><span class='line'><span class="c1">//fetchRequest.resultType = NSManagedObjectResultType;</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">_context</span> <span class="nl">executeFetchRequest</span><span class="p">:</span><span class="n">fetchRequest</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="c1">//这里数组的元素为Doge对象</span>
</span></code></pre></td></tr></table></div></figure>


<h6>## NSCountResultType</h6>

<p>NSCountResultType执行查询后，返回的数组，包含一个对象，NSNmber.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="bp">NSFetchRequest</span> <span class="o">*</span><span class="n">fetchRequest</span> <span class="o">=</span>  <span class="p">[</span><span class="bp">NSFetchRequest</span> <span class="nl">fetchRequestWithEntityName</span><span class="p">:</span><span class="s">@&quot;Doge&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">fetchRequest</span><span class="p">.</span><span class="n">resultType</span> <span class="o">=</span> <span class="n">NSCountResultType</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">_context</span> <span class="nl">executeFetchRequest</span><span class="p">:</span><span class="n">fetchRequest</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="c1">//这里数组的元素为 NSNumber ，一般数组只有一个元素</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">result</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">count</span> <span class="o">=</span> <span class="p">[[</span><span class="n">results</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>## NSDictionaryResultType</h6>

<p>NSDictionaryResultType 顾名思义，是返回一个字典，除了设置fetchRequest.resultType,还需要设置fetchRequest.propertiesToFetch</p>

<h6>## NSManagedObjectIDResultType</h6>

<p>返回唯一标识</p>

<p>Prior to iOS 5, fetching by ID was popular because NSManagedObjectID is thread-safe and using it helped developers implement the thread confinement concurrency model. Now that thread confinement has been deprecated in favor of more modern concurrency models, there’s little reason to fetch by object ID anymore.</p>

<h6># 2. NSPredicate</h6>

<p>The NSPredicate class is used to define logical conditions used to constrain a search either for a fetch or for in-memory filtering.</p>

<p>NSFetchRequest 支持使用谓词来作为，查询筛选条件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="bp">NSFetchRequest</span> <span class="o">*</span><span class="n">fetchRequest</span> <span class="o">=</span>  <span class="p">[</span><span class="bp">NSFetchRequest</span> <span class="nl">fetchRequestWithEntityName</span><span class="p">:</span><span class="s">@&quot;Doge&quot;</span><span class="p">];</span>
</span><span class='line'><span class="nl">fetchRequestWithEntityName</span><span class="p">:</span><span class="s">@&quot;Doge&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">fetchRequest</span><span class="p">.</span><span class="n">predicate</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSPredicate</span> <span class="nl">predicateWithFormat</span><span class="p">:</span><span class="s">@&quot;age &gt; 5&quot;</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">_context</span> <span class="nl">executeFetchRequest</span><span class="p">:</span><span class="n">fetchRequest</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h6># 3. NSSortDescriptor</h6>

<p>除了使用支持使用谓词，NSFetchRequest 还支持使用NSSortDescriptor 进行排序</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="bp">NSFetchRequest</span> <span class="o">*</span><span class="n">fetchRequest</span> <span class="o">=</span>  <span class="p">[</span><span class="bp">NSFetchRequest</span> <span class="nl">fetchRequestWithEntityName</span><span class="p">:</span><span class="s">@&quot;Doge&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSSortDescriptor</span> <span class="o">*</span><span class="n">sortDescriptor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSSortDescriptor</span> <span class="nl">sortDescriptorWithKey</span><span class="p">:</span><span class="s">@&quot;age&quot;</span> <span class="nl">ascending</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="n">fetchRequest</span><span class="p">.</span><span class="n">sortDescriptors</span> <span class="o">=</span> <span class="l">@[</span><span class="n">sortDescriptor</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">_context</span> <span class="nl">executeFetchRequest</span><span class="p">:</span><span class="n">fetchRequest</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h6># 4. NSAsynchronousFetchRequest</h6>

<p>NSFetchRequest 是同步查询的，CoreData 也提供了异步查询的类NSAsynchronousFetchRequest,它通过一个 block ，将数据异步返回，注意，查询方法使用的是 -executeRequest:error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="bp">NSFetchRequest</span> <span class="o">*</span><span class="n">fetchRequest</span> <span class="o">=</span>  <span class="p">[</span><span class="bp">NSFetchRequest</span> <span class="nl">fetchRequestWithEntityName</span><span class="p">:</span><span class="s">@&quot;Doge&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSAsynchronousFetchRequest</span> <span class="o">*</span><span class="n">asyncFetchRequest</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAsynchronousFetchRequest</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFetchRequest</span><span class="p">:</span><span class="n">fetchRequest</span> <span class="nl">completionBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">NSAsynchronousFetchResult</span> <span class="o">*</span> <span class="n">_Nonnull</span> <span class="n">results</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">results</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'><span class="p">[</span><span class="n">_context</span> <span class="nl">executeRequest</span><span class="p">:</span><span class="n">asyncFetchRequest</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Demo</h4>

<h5>添加数据</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="bp">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="n">importSeedJsonSeedIfNeeded</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">importSeedJsonSeedIfNeeded</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MTCoreDataStack</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">managedContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSFetchRequest</span> <span class="o">*</span> <span class="n">fetchRequest</span> <span class="o">=</span> <span class="p">[</span><span class="n">Master</span> <span class="n">fetchRequest</span><span class="p">];</span>
</span><span class='line'>    <span class="n">fetchRequest</span><span class="p">.</span><span class="n">resultType</span> <span class="o">=</span> <span class="n">NSCountResultType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">results</span> <span class="o">=</span> <span class="p">[</span><span class="n">context</span> <span class="nl">executeFetchRequest</span><span class="p">:</span><span class="n">fetchRequest</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">results</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="bp">NSInteger</span> <span class="n">masterCount</span> <span class="o">=</span> <span class="p">[[</span><span class="n">results</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">masterCount</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="nb">self</span> <span class="n">importJsonSeed</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="nb">self</span> <span class="n">importJsonSeed</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="n">importJsonSeed</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">importJsonSeed</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSURL</span> <span class="o">*</span><span class="n">jsonURL</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">URLForResource</span><span class="p">:</span><span class="s">@&quot;seed&quot;</span> <span class="nl">withExtension</span><span class="p">:</span><span class="s">@&quot;json&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSData</span> <span class="o">*</span><span class="n">jsonData</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSData</span> <span class="nl">dataWithContentsOfURL</span><span class="p">:</span><span class="n">jsonURL</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">jsonDict</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSJSONSerialization</span> <span class="nl">JSONObjectWithData</span><span class="p">:</span><span class="n">jsonData</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">NSManagedObjectContext</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MTCoreDataStack</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">managedContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">NSEntityDescription</span> <span class="o">*</span><span class="n">masterEntity</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSEntityDescription</span> <span class="nl">entityForName</span><span class="p">:</span><span class="s">@&quot;Master&quot;</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>            <span class="bp">NSEntityDescription</span> <span class="o">*</span><span class="n">dogeEntity</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSEntityDescription</span> <span class="nl">entityForName</span><span class="p">:</span><span class="s">@&quot;Doge&quot;</span> <span class="nl">inManagedObjectContext</span><span class="p">:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">masterDict</span> <span class="o">=</span> <span class="n">jsonDict</span><span class="p">[</span><span class="s">@&quot;master&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">masterDict</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSDictionary</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">Master</span> <span class="o">*</span><span class="n">master</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Master</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithEntity</span><span class="p">:</span><span class="n">masterEntity</span> <span class="nl">insertIntoManagedObjectContext</span><span class="p">:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>            <span class="n">master</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">masterDict</span><span class="p">[</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="n">master</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="p">[</span><span class="n">masterDict</span><span class="p">[</span><span class="s">@&quot;age&quot;</span><span class="p">]</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">NSArray</span> <span class="o">*</span><span class="n">doges</span> <span class="o">=</span> <span class="n">jsonDict</span><span class="p">[</span><span class="s">@&quot;doges&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">dogeDict</span> <span class="k">in</span> <span class="n">doges</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">dogeDict</span> <span class="nl">isKindOfClass</span><span class="p">:[</span><span class="bp">NSDictionary</span> <span class="k">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">Doge</span> <span class="o">*</span><span class="n">doge</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Doge</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithEntity</span><span class="p">:</span><span class="n">dogeEntity</span> <span class="nl">insertIntoManagedObjectContext</span><span class="p">:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>                <span class="n">doge</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">dogeDict</span><span class="p">[</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>                <span class="n">doge</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="p">[</span><span class="n">dogeDict</span><span class="p">[</span><span class="s">@&quot;age&quot;</span><span class="p">]</span> <span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>                <span class="n">doge</span><span class="p">.</span><span class="n">master</span> <span class="o">=</span> <span class="n">master</span><span class="p">;</span> <span class="c1">//因为在DataModel 里设置了 inverse， 所以master 和 doge可以相互关联上</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">//一定要调用 save 方法，才能真正的将文件存入数据库</span>
</span><span class='line'>            <span class="p">[[</span><span class="n">MTCoreDataStack</span> <span class="n">sharedInstance</span><span class="p">]</span> <span class="n">saveContext</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LayoutMargin & preservesSuperviewLayoutMargins 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2017/08/05/layoutMagrin-preservesSuperviewLayoutMargins-notes/"/>
    <updated>2017-08-05T13:30:51+08:00</updated>
    <id>http://engili.github.io/blog/2017/08/05/layoutMagrin-preservesSuperviewLayoutMargins-notes</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>发现问题</h3>

<p>在IB中拖放tableView，大小为设置为屏幕大小后，添加了四个方向的约束，发现，约束的值居然不是和想象中不太一样，不是0。</p>

<p><img src="https://github.com/engili/engili.github.io/raw/master/images/layout_note_1.png" alt="" /></p>

<p>接着打开attribute inspector,发现约束信息如下：
<img src="https://raw.githubusercontent.com/engili/engili.github.io/master/images/layout_note_2.png" alt="" /></p>

<p>在这里发现Second Item是superView 的 leading Margin. 而不是superView的leading，所以约束的值不是0，但leading margin又是什么？</p>

<h3>Layout Magrin</h3>

<p>通过查找文档，发现这是iOS 8 以后，UIView 新增的一个属性，layoutMargins. 表示一个View的内边距。</p>

<h3>文档</h3>

<p><code>@property(nonatomic) UIEdgeInsets layoutMargins;</code> The default spacing to use when laying out content in the view</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="bp">UIEdgeInsets</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CGFloat</span> <span class="n">top</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">bottom</span><span class="p">,</span> <span class="n">right</span><span class="p">;</span>  <span class="c1">// specify amount to inset (positive) for each of the edges. values can be negative to &#39;outset&#39;</span>
</span><span class='line'><span class="p">}</span> <span class="bp">UIEdgeInsets</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个属性类似Android中的padding，用于父View设置子View布局的内边距。</p>

<p>The default margins are eight points on each side.</p>

<p>默认值是8个点，可修改。</p>

<p>If the view is a view controller’s root view, the system sets and manages the margins. The top and bottom margins are set to zero points. The side margins vary depending on the current size class, but can be either 16 or 20 points. You cannot change these margins.</p>

<p>但如果，是ViewController的rootView，layoutMargins 是系统设置和控制的，不能修改。（文章最开始的tableView到 leading Margin 约束为 -16.就说明，left margin是16点。）</p>

<p>到这里，其实对layoutMargins理解都较为清晰，但是文档中还提到了一个与layoutMargins 相关的属性： preservesSuperviewLayoutMargins</p>

<p>When the edge of your view is close to the edge of the superview and the preservesSuperviewLayoutMargins property is YES, the actual layout margins may be increased to prevent content from overlapping the superview’s margins.</p>

<p>读完感觉字面意思都懂，但就是不知道是什么意思。</p>

<h3>preservesSuperviewLayoutMargins</h3>

<p><code>@property(nonatomic) BOOL preservesSuperviewLayoutMargins;</code> A Boolean value indicating whether the current view also respects the margins of its superview. The default value of this property is NO.</p>

<p>一个BOOL值，决定当前View布局是否也考虑父View的layoutMargins. 默认是NO.</p>

<p>到这里还是晕的，没看懂这个属性是干嘛，继续看文档。</p>

<h3>文档</h3>

<p>When the value of this property is YES, the superview’s margins are also considered when laying out content. This margin affects layouts where the distance between the edge of a view and its superview is smaller than the corresponding margin.</p>

<p>当这个属性是YES的时候，父view的layoutMargins会被考虑到当前View的布局中。也就是说，当前View和父View的内边距，小于父View相应layoutMargins中对应的内边距时，父View的内边距会决定当前View的布局。还是有些抽象。</p>

<p>For example, you might have a content view whose frame precisely matches the bounds of its superview. When any of the superview’s margins is inside the area represented by the content view and its own margins, UIKit adjusts the content view’s layout to respect the superview’s margins. The amount of the adjustment is the smallest amount needed to ensure that content is also inside the superview’s margins.</p>

<p>这里大概的意思就是，你有一个contentView，它的大小和父View一样大的你设置了contentView的preservesSuperviewLayoutMargins为YES，当你对contentView中的子View进行布局的时候，如果有子View的所在位置（比如：子View到contentView的左边距，小于父View的LayoutMargin 对应的左内边距）UIKit就会对子View进行一些调整。 感觉看了这一段稍微清晰了一些，可是写代码想实现一个demo的时候，发现这个preservesSuperviewLayoutMargins属性好像并没有什么卵用。 最后再Google上搜到了这篇文章。 <a href="https://www.shinobicontrols.com/blog/ios8-day-by-day-day-32-layout-margins">iOS8 Day-by-Day :: Day 32 :: Layout Margins</a></p>

<p>然后自己实现了一个 demo 如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//创建一个红色的View，大小和手机屏幕一样大，</span>
</span><span class='line'>    <span class="c1">//layoutMargin 为（100，100，100，100）</span>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">redView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">redView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">redView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">redView</span><span class="p">.</span><span class="n">layoutMargins</span> <span class="o">=</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">redView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;H:|-(0)-[redView]-(0)-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="n">NSLayoutFormatDirectionLeadingToTrailing</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">redView</span><span class="p">)]];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;V:|-(0)-[redView]-(0)-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="n">NSLayoutFormatDirectionLeadingToTrailing</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">redView</span><span class="p">)]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//创建一个绿色的View，作为我们的ContentView，父View为红色的View</span>
</span><span class='line'>    <span class="c1">//约束为到红色View各边距为10，但红色View 的layoutMargin 还是再绿色View内</span>
</span><span class='line'>    <span class="c1">//设置绿色View preservesSuperviewLayoutMargins 为YES</span>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">greenView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">greenView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">greenColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">greenView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="n">greenView</span><span class="p">.</span><span class="n">preservesSuperviewLayoutMargins</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">redView</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">greenView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">redView</span> <span class="nl">addConstraints</span><span class="p">:[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;H:|-(10)-[greenView]-(10)-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="n">NSLayoutFormatDirectionLeadingToTrailing</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">greenView</span><span class="p">)]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">redView</span> <span class="nl">addConstraints</span><span class="p">:[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;V:|-(10)-[greenView]-(10)-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="n">NSLayoutFormatDirectionLeadingToTrailing</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">greenView</span><span class="p">)]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//创建一个蓝色View，作为绿色View的子View</span>
</span><span class='line'>    <span class="bp">UIView</span> <span class="o">*</span><span class="n">blueView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">blueView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">blueColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">blueView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">greenView</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">blueView</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//注意，leading 约束对应的第二item 属性为 leading.margin</span>
</span><span class='line'>    <span class="p">[</span><span class="n">greenView</span> <span class="nl">addConstraint</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">blueView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeLeading</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">greenView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeLeadingMargin</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">constant</span><span class="p">:</span><span class="mf">0.0</span><span class="p">]];</span>
</span><span class='line'>    <span class="c1">// trailing 属性 为父View trailig - 8.0// 8.0 是默认layout Margin</span>
</span><span class='line'>    <span class="p">[</span><span class="n">greenView</span> <span class="nl">addConstraint</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">blueView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeTrailing</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">greenView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeTrailing</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">constant</span><span class="p">:</span><span class="o">-</span><span class="mf">8.0</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">greenView</span> <span class="nl">addConstraint</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">blueView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeTop</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">greenView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeTop</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">constant</span><span class="p">:</span><span class="mf">0.0</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">greenView</span> <span class="nl">addConstraint</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">blueView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeBottom</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">greenView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeBottom</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">constant</span><span class="p">:</span><span class="mf">0.0</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://github.com/engili/engili.github.io/raw/master/images/layout_note_3.png" alt="" /></p>

<h3>总结</h3>

<p>最后总结一下preservesSuperviewLayoutMargins生效的要点：（如果总结的不对希望大家指正~） 1.preservesSuperviewLayoutMargins 只在自动布局情况下生效 2.contentView（设置preservesSuperviewLayoutMargins的View）的父View的LayoutMargin中，至少存在contentView 某一个方向到父View的边距，小于父View LayoutMargin 对应的内边距。（就比如上面栗子中，绿色View到红色View的左边距是10，红色View的LayoutMargin中对应的左内边距为100） 3.设置自动布局约束的时候，一定要设置Margin相关的约束(iOS8以上有效)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">,</span> <span class="n">NSLayoutAttribute</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLayoutAttributeLeftMargin</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeRightMargin</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeTopMargin</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeBottomMargin</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeLeadingMargin</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeTrailingMargin</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeCenterXWithinMargins</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">NSLayoutAttributeCenterYWithinMargins</span> <span class="n">NS_ENUM_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>思考</h3>

<p>现在基本上弄清楚了，LayoutMargin和preservesSuperviewLayoutMargins属性，以及如何使用，但是对他们在自动布局的实际使用场景还是没有思考太清楚，没有明白苹果为什么会设置这两个属性，特别是preservesSuperviewLayoutMargins属性。 = =</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Tips]]></title>
    <link href="http://engili.github.io/blog/2017/05/14/oc-ios-tips/"/>
    <updated>2017-05-14T06:58:39+08:00</updated>
    <id>http://engili.github.io/blog/2017/05/14/oc-ios-tips</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>1.在block执行期间，weak引用强持有</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="k">__weak</span> <span class="k">typedef</span><span class="p">(</span><span class="n">someClass</span><span class="p">)</span> <span class="n">weakClass</span> <span class="o">=</span> <span class="n">someClass</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">xxx</span> <span class="nl">setHandler</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="k">typedef</span><span class="p">(</span><span class="n">someClass</span><span class="p">)</span> <span class="n">strongClass</span> <span class="o">=</span> <span class="n">weakClass</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">strongClass</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>为了避免强引用环，在使用闭包时，一些引入的对象，都使用不增加引用计数的<code>weak</code>指针持有，但当使用的时候，为了避免对象被提前释放，可以用<code>strong</code>指针持有，可以确保在使用该对象的时候，不会被释放。</li>
<li>使用不带修饰的指针变量，默认是带有<code>__strong</code>修饰</li>
</ul>


<h3>2. UISwitch 重复触发action方法</h3>

<p>理论上，只用当用户点击了<code>UISwitch</code>,才会触发，<code>vauleChange</code> 的action方法 但是实际开发中，发现iOS10机型上，如果在action方法里调用了-<code>setOn:animated:</code>或者<code>setOn:</code> ，就会多触发一次action方法。</p>

<h4>解决方案</h4>

<ol>
<li>避免在valueChange方法里调用-setOn:animated:或setOn:</li>
<li>如果无法避免，使用dispatch_async,在主队列执行这些方法（这个方法有个缺点，比较卡的手机会看到闪动的现象）</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">valueChanged:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>       <span class="p">[</span><span class="n">sender</span> <span class="nl">setOn</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.iOS 10 以下机型不会出现这个问题，iOS11 待验证</p>

<h4>参考：</h4>

<p><a href="https://stackoverflow.com/questions/39566361/uiswitch-seton-animated-does-not-work-as-document">UISwitch setOn(:, animated:) does not work as document</a></p>

<h3>3. Xcode8 生成CoreData NSManagedObject 报Duplicate symbol error</h3>

<p>上周写CoreData的时候，当使用Editor的Create NSManagedObject SubClass 生成好对应Entity的ManagedObject后，编译的时候报Duplicate symbol error，意思是符号重复定义的错误，一脸蒙蔽好吧，都是系统生成的，我什么都没有做=。=</p>

<p>然后网上搜了一下，搜到了问题的原因和解决方案 <a href="http://stackoverflow.com/questions/40460307/duplicate-symbol-error-when-adding-nsmanagedobject-subclass-duplicate-link">duplicate-symbol-error-when-adding-nsmanagedobject-subclass-duplicate-link xcode-beta-8-cant-create-core-data</a></p>

<h4>原因</h4>

<p>Xcode 8 的.xcdatamodeId 文件会自动生成那些Entity的类，当你在Editor->Create NSManagedObject SubClass 再次生成这些Entity类的时候，编译的时候，就会有符号重定义的错误</p>

<h4>解决方案</h4>

<ul>
<li>当你不需要自己修改NSManagedObject 文件时候，就使用Xcode生成的文件，直接引用头文件就好。</li>
<li>当你需要自己修改NSManagedObject 文件，在Xcode中选中.xcdatamodeId 文件 在右侧属性栏中， <del>把Tools Version 修改成小于8.0的版本 ，然后就可以使用Editor 生成NSManagedObject类了。</del> 修改Entity Inspector 里Class对应的Codegen 如下图：
<img src="https://github.com/engili/engili.github.io/raw/master/images/ios-tips-01.png" alt="" /></li>
</ul>


<h3>4. Swift 单例</h3>

<h4>使用类常量</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">MTNetWorkManager</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">let</span> <span class="n">shared</span> <span class="o">=</span> <span class="n">MTNetWorkManager</span><span class="p">(</span><span class="nl">baseURL</span><span class="p">:</span> <span class="n">API</span><span class="p">.</span><span class="n">baseURL</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nl">baseURL</span><span class="p">:</span> <span class="n">URL</span>
</span><span class='line'>
</span><span class='line'><span class="n">private</span> <span class="k">init</span><span class="p">(</span><span class="nl">baseURL</span><span class="p">:</span> <span class="n">URL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">baseURL</span> <span class="o">=</span> <span class="n">baseURL</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//外部调用 MTNetWorkManager.shared</span>
</span></code></pre></td></tr></table></div></figure>


<h4>使用类方法</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="n">MTNetWorkManager</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">private</span> <span class="k">let</span> <span class="n">sharedInstance</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">shared</span> <span class="o">=</span> <span class="n">MTNetWorkManager</span><span class="p">(</span><span class="nl">baseURL</span><span class="p">:</span> <span class="n">API</span><span class="p">.</span><span class="n">baseURL</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Configure 可以做一些初始化配置</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">shared</span>
</span><span class='line'>
</span><span class='line'><span class="p">}()</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nl">baseURL</span><span class="p">:</span> <span class="n">URL</span>
</span><span class='line'>
</span><span class='line'><span class="n">private</span> <span class="k">init</span><span class="p">(</span><span class="nl">baseURL</span><span class="p">:</span> <span class="n">URL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">baseURL</span> <span class="o">=</span> <span class="n">baseURL</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">func</span> <span class="n">shared</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="k">return</span> <span class="n">sharedInstance</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//外部调用 MTNetWorkManager.shared()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Static定义常量和变量总结]]></title>
    <link href="http://engili.github.io/blog/2017/03/10/oc-static/"/>
    <updated>2017-03-10T20:48:39+08:00</updated>
    <id>http://engili.github.io/blog/2017/03/10/oc-static</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>1. .m 文件里定义static 常量</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// .m</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kConstant</span> <span class="o">=</span> <span class="n">xxx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="err">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>该文件里全局可见 (准确说应该是compilation unit，而不是文件)</li>
<li>外部文件不能通过extern引用</li>
</ul>


<h3>2. .m 文件里定义static 变量</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// .m</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">intVar</span> <span class="o">=</span> <span class="n">xxx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="err">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .h</span>
</span><span class='line'><span class="c1">//实现类似类变量的机制</span>
</span><span class='line'><span class="o">+</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">intVar</span><span class="p">;</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setIntVar:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="nv">intVar</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>OC里没有类变量的概念，但通过静态的全局变量，可以实现类似类变量的东西

<ul>
<li>因为一般情况下，OC里的类以文件为单位，划分。通过给类添加，get 和 set的类方法，去实际操作这个全局变量，就可以实现类似类变量的机制。</li>
</ul>
</li>
<li>外部文件不能通过extern引用</li>
</ul>


<h3>3. .h 里定义static 常量</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// .h</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">kConstatnt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://stackoverflow.com/questions/92546/variable-declarations-in-header-files-static-or-not#92641">Variable declarations in header files - static or not?</a></p>

<ul>
<li>这里static，意味着，每一个包含这个头文件的源文件里，会包含一个这个常量的拷贝，但与此同时，链接时，并不会出现符号冲定义的错误。</li>
<li>外部文件，可以通过引用该头文件，使用这个全局常量，但这里获得的是该常量的一份，拷贝，因为常量并不能修改，所以获取的是拷贝，也没有太多问题</li>
<li>如果这里，去掉这个static，外部文件引用这个头文件，就会出现符号重定义的链接错误</li>
<li>但是这种实现全局常量的方式不太好</li>
</ul>


<h3>4. .h 里定义static 变量</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// .h</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">intVar</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这里同在.h里定义static 常量一样，每一个引用该头文件的源文件，获取到的是这个变量的一份拷贝，也就是说你在不同的文件里，修改这个变量，都是修改当前文件里的一份拷贝，只会在当前这个文件范围里生效</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// a.h </span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">//定义了一个全局变量</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">A</span>: <span class="bp">NSObject</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">printA</span><span class="p">;</span> <span class="c1">//打印a的值</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// a.m</span>
</span><span class='line'><span class="k">@implementation</span>
</span><span class='line'><span class="err">+ (</span><span class="nc">void</span><span class="p">)</span><span class="n">printA</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="c1">// b.h</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">B</span>: <span class="bp">NSObject</span>
</span><span class='line'><span class="p">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">printA</span><span class="p">;</span> <span class="c1">//打印a的值</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// b.m </span>
</span><span class='line'><span class="cp">#import &quot;a.h&quot; </span><span class="c1">//引入了全局变量 a</span>
</span><span class='line'><span class="k">@implementation</span>
</span><span class='line'><span class="err">+ (</span><span class="nc">void</span><span class="p">)</span><span class="n">printA</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'><span class="c1">// main.m</span>
</span><span class='line'><span class="p">[</span><span class="n">A</span> <span class="n">printA</span><span class="p">];</span>  <span class="c1">// 1 </span>
</span><span class='line'><span class="p">[</span><span class="n">B</span> <span class="n">printA</span><span class="p">];</span>  <span class="c1">// 2</span>
</span><span class='line'><span class="p">[</span><span class="n">A</span> <span class="n">printA</span><span class="p">];</span>  <span class="c1">// 1</span>
</span><span class='line'><span class="p">[</span><span class="n">B</span> <span class="n">printA</span><span class="p">];</span>  <span class="c1">// 3</span>
</span><span class='line'><span class="p">[</span><span class="n">A</span> <span class="n">printA</span><span class="p">];</span>  <span class="c1">// 1</span>
</span><span class='line'><span class="p">[</span><span class="n">B</span> <span class="n">printA</span><span class="p">];</span>  <span class="c1">// 4</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>所以这种方式，定义的变量，并不是真正的全局变量。</li>
</ul>


<h3>5. 更优雅的方式，定义全局变量和全局常量</h3>

<ul>
<li>在.m文件里，定义全局变量，和全局常量，不用static修饰</li>
<li>在.h文件里，用extern声明这些全局变量和全局</li>
<li>其他文件引用这个.h来使用相应的常量和变量。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// .m</span>
</span><span class='line'><span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// .h</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
