<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Engili's Blog]]></title>
  <link href="http://engili.github.io/atom.xml" rel="self"/>
  <link href="http://engili.github.io/"/>
  <updated>2018-04-07T18:00:31+08:00</updated>
  <id>http://engili.github.io/</id>
  <author>
    <name><![CDATA[engili]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CALayer 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/04/05/calayer-notes/"/>
    <updated>2018-04-05T17:05:05+08:00</updated>
    <id>http://engili.github.io/blog/2018/04/05/calayer-notes</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>CoreAnimation</h1>

<p><code>CoreAnimation</code>将视图转换为<code>位图</code>，可以直接在<code>GPU</code>上操作，实现动画效果</p>

<h1>CALayer (Model Object)</h1>

<ul>
<li>CALayer是Model Objcet</li>
<li>主要管理<code>位图</code>数据信息，位图内容可以是View绘制也可以是设置的图片</li>
<li>大多数Layer不进行绘制，只是将View的内容换成为位图</li>
</ul>


<h1>CALayer 坐标</h1>

<h2>point-based 坐标系统</h2>

<ul>
<li>基于屏幕坐标系统，可以表示layer之间的关系</li>
<li><code>bounds</code>和<code>position</code>属性</li>
</ul>


<h2>unit 坐标系统</h2>

<ul>
<li>和屏幕坐标系统无关</li>
<li><code>anchorPoint</code>

<ul>
<li>默认值是（0.5.0.5） 取值范围 0 - 1</li>
<li>影响<code>position</code>属性

<ul>
<li>当anchorPoint为（0，0）时，<code>position</code>在layer左上角</li>
<li>当anchorPoint为（1，1）时，<code>position</code>在layer右下角</li>
<li>当anchorPoint为（0.5，0.5）时，<code>position</code>在layer中心</li>
</ul>
</li>
<li>影响旋转<code>transform</code>的中心点</li>
</ul>
</li>
</ul>


<h1>Layer Trees</h1>

<ul>
<li>layer tree

<ul>
<li>layer Model对象，管理位图数据</li>
</ul>
</li>
<li><p>presentation tree</p>

<ul>
<li>当动画正在进行的时候，可以通过<code>presentation tree</code> 获取当前状态的值</li>
</ul>


<pre><code class="``swift">  func presentation() -&gt; Self?
</code></pre>

<p>  这个方法，返回 屏幕上正在动画，当前状态下的layer。这个layer对象的sublayers, mask, and superlayer 属性得到的对象都是在<code>presentation tree</code>上</p></li>
<li><p>render tree</p>

<ul>
<li>执行实际的动画layer，私有类</li>
</ul>
</li>
</ul>


<h1>改变UIView底层对应的Layer</h1>

<ul>
<li>重写<code>layerClass</code>方法即可</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">class</span> <span class="k">var</span> <span class="nl">layerClass</span><span class="p">:</span> <span class="n">Swift</span><span class="p">.</span><span class="n">AnyClass</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">get</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">CAGradientLayer</span><span class="p">.</span><span class="nb">self</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>CALayer subclasses</h1>

<!--- CAEmitterLayer

Used to implement a Core Animation–based particle emitter system. The emitter layer object controls the generation of the particles and their origin.-->


<h3>CAGradientLayer</h3>

<ul>
<li>绘制渐变色的Layer</li>
</ul>


<h4>property</h4>

<ul>
<li><code>var colors: [Any]? { get set }</code>

<ul>
<li>数组元素为<code>CGColorRef</code> 才能生效</li>
</ul>
</li>
<li><code>var locations: [NSNumber]? { get set }</code>

<ul>
<li>数组元素为0到1 增长数， 表示颜色停止的区间</li>
<li>数目和<code>colors</code>相同</li>
</ul>
</li>
<li><code>var startPoint: CGPoint { get set }</code>

<ul>
<li>unit 坐标系统属性，渐变色开始位置</li>
<li>默认值是(0.5,0)</li>
</ul>
</li>
<li><code>var endPoint: CGPoint { get set }</code>

<ul>
<li>unit 坐标系统属性，渐变色结束位置</li>
<li>默认值是(0.5,1)</li>
</ul>
</li>
</ul>


<p> 创建一个渐变色Layer</p>

<pre><code class="` swift "> class MTGradientView: UIView {

    override class var layerClass: Swift.AnyClass  {
        return CAGradientLayer.self
    }

    override init(frame: CGRect) {
        super.init(frame: frame)
        self.setupLayer()
    }

    fileprivate func setupLayer() {
        gradientLayer?.colors = [UIColor.red.cgColor, UIColor.yellow.cgColor]
        gradientLayer?.locations = [0.5,1]
        gradientLayer?.startPoint = .zero
        gradientLayer?.endPoint = CGPoint(x: 1, y: 1)
    }
 }
</code></pre>

<!--
- CAMetalLayer

Used to set up and vend drawable textures for rendering layer content using Metal.

- CAEAGLLayer/CAOpenGLLayer

Used to set up the backing store and context for rendering layer content using OpenGL ES (iOS) or OpenGL (OS X).

- CAReplicatorLayer

Used when you want to make copies of one or more sublayers automatically. The replicator makes the copies for you and uses the properties you specify to alter the appearance or attributes of the copies.

- CAScrollLayer

Used to manage a large scrollable area composed of multiple sublayers.

- CAShapeLayer

Used to draw a cubic Bezier spline. Shape layers are advantageous for drawing path-based shapes because they always result in a crisp path, as opposed to a path you draw into a layer’s backing store, which would not look as good when scaled. However, the crisp results do involve rendering the shape on the main thread and caching the results.

- CATextLayer

Used to render a plain or attributed string of text.

- CATiledLayer

Used to manage a large image that can be divided into smaller tiles and rendered individually with support for zooming in and out of the content.

- CATransformLayer

Used to render a true 3D layer hierarchy, rather than the flattened layer hierarchy implemented by other layer classes.

- QCCompositionLayer

Used to render a Quartz Composer composition. (OS X only)
-->


<h1>设置Layer content</h1>

<h3>设置Lyaer的content，三种方法</h3>

<h5>1. 给layer的<code>contents</code>属性，设置图片（适用于内容几乎不会或者很少改变</h5>

<ul>
<li><code>var contents: Any? { get set }</code> 使用<code>CGImage</code></li>
<li>赋值这个属性后，layer就会使用这个图片，而不会生成自己的<code>backing store</code></li>
<li>和UIView绑定的layer，最后不要单独设置这个属性</li>
</ul>


<h5>2. 给layer设置<code>delegate</code>,让委托去绘制内容</h5>

<ul>
<li><code>UIView</code>底层的layer，自动和UIView设置了委托关系</li>
<li><p><code>weak var delegate: CALayerDelegate? { get set }</code></p></li>
<li><p><code>func display(_ layer: CALayer)</code></p>

<ul>
<li>当layer被标记为content需要reload是，例如在<code>setNeedsDisplay</code> 后会调用到该方法</li>
<li>在该方法中，一般通过设置layer的contens属性</li>
</ul>


<pre><code class="`` swift "> func display(_ layer: CALayer) {
     if let image = self.loadImageFromBundle() {
         layer.bounds = CGRect(x: 0, y: 0, width: image.width, height: image.height)
         layer.contents = image
     }
 }
</code></pre></li>
<li><code>func draw(_ layer: CALayer, in ctx: CGContext)</code>

<ul>
<li>当layer被标记为content需要reload是，例如在<code>setNeedsDisplay</code> 后会调用到该方法</li>
<li>如果委托实现了<code>display(_ :)</code>，该方法不会被调用</li>
</ul>
</li>
<li><code>func layerWillDraw(_ layer: CALayer)</code>

<ul>
<li>在绘制回调<code>draw(_ , in ctx:)</code> 之前被调用</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">draw</span><span class="p">(</span><span class="n">_</span> <span class="nl">layer</span><span class="p">:</span> <span class="bp">CALayer</span><span class="p">,</span> <span class="k">in</span> <span class="nl">ctx</span><span class="p">:</span> <span class="bp">CGContext</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">path</span> <span class="o">=</span> <span class="n">CGMutablePath</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">path</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="nl">to</span><span class="p">:</span> <span class="p">.</span><span class="n">zero</span><span class="p">)</span>
</span><span class='line'>    <span class="n">path</span><span class="p">.</span><span class="n">addRect</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ctx</span><span class="p">.</span><span class="n">setLineWidth</span><span class="p">(</span><span class="mf">5.0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ctx</span><span class="p">.</span><span class="n">setStrokeColor</span><span class="p">(</span><span class="bp">UIColor</span><span class="p">.</span><span class="n">red</span><span class="p">.</span><span class="n">cgColor</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ctx</span><span class="p">.</span><span class="n">addPath</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ctx</span><span class="p">.</span><span class="n">strokePath</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="nf">layerWillDraw</span><span class="p">(</span><span class="n">_</span> <span class="nl">layer</span><span class="p">:</span> <span class="bp">CALayer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//called before draw(_ , in ctx:) </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>func layoutSublayers(of layer: CALayer)</code></p>

<ul>
<li>当layer的<code>bounds</code>改变时，需要重新对子layer进行布局</li>
</ul>
</li>
<li><p><code>func action(for layer: CALayer, forKey event: String) -&gt; CAAction?</code></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="nf">action</span><span class="p">(</span><span class="k">for</span> <span class="nl">layer</span><span class="p">:</span> <span class="bp">CALayer</span><span class="p">,</span> <span class="n">forKey</span> <span class="nl">event</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">CAAction</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="n">event</span> <span class="o">==</span> <span class="s">&quot;moveRight&quot;</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">let</span> <span class="n">animation</span> <span class="o">=</span> <span class="bp">CABasicAnimation</span><span class="p">()</span>
</span><span class='line'>    <span class="n">animation</span><span class="p">.</span><span class="n">valueFunction</span> <span class="o">=</span> <span class="bp">CAValueFunction</span><span class="p">.</span><span class="k">init</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="n">kCAValueFunctionTranslateX</span><span class="p">)</span>
</span><span class='line'>    <span class="n">animation</span><span class="p">.</span><span class="n">fromValue</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">animation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="mi">300</span>
</span><span class='line'>    <span class="n">animation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">animation</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 外界调用</span>
</span><span class='line'><span class="n">fileprivate</span> <span class="k">func</span> <span class="n">moveLayerToRight</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">guard</span> <span class="k">let</span> <span class="n">action</span> <span class="o">=</span> <span class="n">startLayer</span><span class="p">.</span><span class="n">action</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;moveRight&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">action</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="s">&quot;transform&quot;</span><span class="p">,</span> <span class="nl">object</span><span class="p">:</span> <span class="n">startLayer</span><span class="p">,</span> <span class="nl">arguments</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>3. 定义layer的子类，重写绘制的方法</h5>

<ul>
<li><code>func display()</code>

<ul>
<li>该方法的默认实现是，若当前layer有delegate，会去调用delegate 的 <code>func display(_ layer: CALayer)</code> 方法，若delegate，没有实现这个方法，这个方法，创建back store，然后调用layer的<code>func draw(in ctx: CGContext)</code></li>
<li>当layer被标记为content需要reload是，例如在<code>setNeedsDisplay</code> 后会调用到该方法</li>
<li>在该方法中，一般通过设置layer的contens属性</li>
</ul>
</li>
<li><code>func draw(in ctx: CGContext)</code>

<ul>
<li>绘制</li>
</ul>
</li>
</ul>


<h3>Contents Property</h3>

<ul>
<li><p>position-based gravity constants</p>

<p>  <img src="https://github.com/engili/engili.github.io/raw/master/postImages/layer_contentsgravity1_2x.png" width="549" height="340"></p></li>
<li><p>scalling-based gravity constatns</p>

<p>  <img src="https://github.com/engili/engili.github.io/raw/master/postImages/positioningmask_2x.png" width="549" height="340"></p></li>
</ul>


<h4>定义Layer其他外观</h4>

<ul>
<li><code>background</code> 位于contents image 下</li>
<li><code>border</code> 位于contens image 上</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keyboards 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/04/01/keyboards-notes/"/>
    <updated>2018-04-01T20:13:05+08:00</updated>
    <id>http://engili.github.io/blog/2018/04/01/keyboards-notes</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Notification</h2>

<ul>
<li>键盘显示(前/后)发送的通知

<ul>
<li>UIKeyboardWillShowNotification</li>
<li>UIKeyboardDidShowNotification</li>
</ul>
</li>
<li>键盘消失(前/后)发送的通知

<ul>
<li>UIKeyboardWillHideNotification</li>
<li>UIKeyboardDidHideNotification</li>
</ul>
</li>
<li>键盘frame改变（前/后）的通知

<ul>
<li>UIKeyboardWillChangeFrameNotification</li>
<li>UIKeyboardDidChangeFrameNotification</li>
</ul>
</li>
</ul>


<h4>键盘弹起通知顺序</h4>

<ol>
<li>UIKeyboardWillChangeFrameNotification</li>
<li>UIKeyboardWillShowNotification</li>
<li>UIKeyboardDidChangeFrameNotification</li>
<li>UIKeyboardDidShowNotification</li>
</ol>


<h4>键盘收起通知顺序</h4>

<ol>
<li>UIKeyboardWillChangeFrameNotification</li>
<li>UIKeyboardWillHideNotification</li>
<li>UIKeyboardDidChangeFrameNotification</li>
<li>UIKeyboardDidHideNotification</li>
</ol>


<h4>切换键盘通知顺序</h4>

<ol>
<li>UIKeyboardWillChangeFrameNotification</li>
<li>UIKeyboardWillShowNotification</li>
<li>UIKeyboardDidChangeFrameNotification</li>
<li>UIKeyboardDidShowNotification</li>
</ol>


<p>这些通知收到的duration 一般为0。</p>

<h3>UserInfo</h3>

<p>通知的notification object 为nil，通知信息都在<code>userInfo</code>中</p>

<ul>
<li>UIKeyboardAnimationCurveUserInfoKey

<ul>
<li>包含<code>NSNumber</code>包装的<code>UIViewAnimationCurve</code>，获取键盘动画的时间函数</li>
<li>测试的时候，取到的值为7，不能转换成任何定义好的的时间函数（迷&hellip;）</li>
</ul>
</li>
<li>UIKeyboardAnimationDurationUserInfoKey

<ul>
<li>包含<code>NSNumber</code>包装的<code>double</code>,获取键盘动画时间</li>
</ul>
</li>
<li>UIKeyboardIsLocalUserInfoKey

<ul>
<li>包含<code>NSNumber</code>包装的<code>Bool</code>,获取当前键盘是不是App调起的，一般用于iPad等多窗口下的应用开发</li>
</ul>
</li>
<li>UIKeyboardFrameBeginUserInfoKey

<ul>
<li>包含<code>NSValue</code>包装的<code>CGRect</code>，获取键盘开始的frame在屏幕坐标系下，frame值和设备方向有关</li>
</ul>
</li>
<li>UIKeyboardFrameEndUserInfoKey

<ul>
<li>包含<code>NSValue</code>包装的<code>CGRect</code>，获取键盘结束的frame在屏幕坐标系下，frame值和设备方向有关</li>
<li>一般使用这个key值对应frame的size</li>
</ul>
</li>
</ul>


<h4>注：</h4>

<ul>
<li>只应该使用<code>UIKeyboardFrameBeginUserInfoKey</code>和<code>UIKeyboardFrameEndUserInfoKey</code>中的size信息，因为键盘在动画，orgign可能会随时改动。</li>
<li>因为键盘的高度总会改变，一般应该使用<code>UIKeyboardFrameEndUserInfoKey</code>中的size信息

<ul>
<li>实际开发中，遇到过使用origin，在屏幕旋转成横屏，又旋转回竖屏的时候，拿到的origin就改变了的问题，所以一般还是使用size属性就好</li>
</ul>
</li>
</ul>


<h3>Demo</h3>

<h4>实现一个位于底部的文本框，可以跟随键盘弹出和收起</h4>

<h6>监听通知</h6>

<figure class='code'><figcaption><span>监听UIKeyboardWillShow 和 UIKeyboardWillHide </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">fileprivate</span> <span class="k">func</span> <span class="nf">registerNotification</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NotificationCenter</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nl">selector</span><span class="p">:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">keyboardWillShow</span><span class="p">(</span><span class="nl">_</span><span class="p">:)),</span> <span class="nl">name</span><span class="p">:</span> <span class="bp">NSNotification</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">UIKeyboardWillShow</span><span class="p">,</span> <span class="nl">object</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="n">NotificationCenter</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">addObserver</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="nl">selector</span><span class="p">:</span> <span class="err">#</span><span class="n">selector</span><span class="p">(</span><span class="n">keyboardWillHide</span><span class="p">(</span><span class="nl">_</span><span class="p">:)),</span> <span class="nl">name</span><span class="p">:</span> <span class="bp">NSNotification</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">UIKeyboardWillHide</span><span class="p">,</span> <span class="nl">object</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>UIKeyboardWillShow</h5>

<figure class='code'><figcaption><span>UIKeyboardWillShow进行弹起，或者键盘高度改变动画</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">objc</span> <span class="n">fileprivate</span> <span class="k">func</span> <span class="n">keyboardWillShow</span><span class="p">(</span><span class="n">_</span> <span class="nl">notification</span> <span class="p">:</span> <span class="n">Notification</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">duration</span> <span class="o">=</span> <span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?</span><span class="p">[</span><span class="n">UIKeyboardAnimationDurationUserInfoKey</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">NSNumber</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">doubleValue</span> <span class="o">??</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">let</span> <span class="n">endFrame</span> <span class="o">=</span> <span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?</span><span class="p">[</span><span class="n">UIKeyboardFrameEndUserInfoKey</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">NSValue</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">cgRectValue</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">height</span> <span class="o">=</span> <span class="n">endFrame</span><span class="p">.</span><span class="n">height</span>
</span><span class='line'>        <span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="n">duration</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">beginFromCurrentState</span><span class="p">],</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="nb">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>            <span class="c1">//到底部的约束为键盘高度</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">?</span><span class="p">.</span><span class="n">bottomAlignConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">height</span>
</span><span class='line'>            <span class="nb">self</span><span class="o">?</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">layoutIfNeeded</span><span class="p">()</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>UIKeyboardWillHide</h4>

<figure class='code'><figcaption><span>键盘收起动画</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="p">@</span><span class="n">objc</span> <span class="n">fileprivate</span> <span class="k">func</span> <span class="n">keyboardWillHide</span><span class="p">(</span><span class="n">_</span> <span class="nl">notification</span> <span class="p">:</span> <span class="n">Notification</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">duration</span> <span class="o">=</span> <span class="p">(</span><span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span><span class="o">?</span><span class="p">[</span><span class="n">UIKeyboardAnimationDurationUserInfoKey</span><span class="p">]</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">NSNumber</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="n">doubleValue</span> <span class="o">??</span> <span class="mi">0</span>
</span><span class='line'>    <span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="n">duration</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">beginFromCurrentState</span><span class="p">],</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="nb">self</span><span class="p">]</span> <span class="k">in</span>
</span><span class='line'>        <span class="c1">//到底部的约束为0</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">?</span><span class="p">.</span><span class="n">bottomAlignConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">?</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">layoutIfNeeded</span><span class="p">()</span>
</span><span class='line'>    <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>相关Demo地址</h2>

<p><a href="https://github.com/engili/Blog-Demos/tree/master/iOS/UIKit/Keyboard/MTKeyboardNotificationDemo">Demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIKit Animations 学习笔记]]></title>
    <link href="http://engili.github.io/blog/2018/03/24/uikit-animations-note/"/>
    <updated>2018-03-24T21:33:06+08:00</updated>
    <id>http://engili.github.io/blog/2018/03/24/uikit-animations-note</id>
    <content type="html"><![CDATA[<!-- more -->


<h3>UIView 可动画属性 (Animatable Property)</h3>

<ul>
<li>frame

<ul>
<li>当<code>transform</code> 属性不为<code>identity</code>时，<code>frame</code>是未定义的，使用<code>bounds</code>或<code>center</code>做动画</li>
</ul>
</li>
<li>bounds</li>
<li>center</li>
<li>transform</li>
<li>alpha</li>
<li>backgroundColor</li>
<li><del>contentStretch</del> (iOS 7.0弃用）

<ul>
<li><del>Modify this property to change the way the view’s contents are stretched to fill the available space.</del></li>
</ul>
</li>
</ul>


<h5>注：改变某个正在进行的动画的属性的值，并不会打断动画，而是动画继续执行，并且最终态到你设置的那个值</h5>

<h3>Animations Block-Based Methods</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="k">func</span> <span class="n">animate</span><span class="p">(</span><span class="n">withDuration</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这个方法使用<code>curveEaseInOut</code>和<code>transitionNone</code>选项，动画期间动画的View不响应用户交互</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="k">func</span> <span class="n">animate</span><span class="p">(</span><span class="n">withDuration</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">,</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">((</span><span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>completion</code>,如果<code>duration</code>值是0，block会在下一个<code>runloop cycle</code>被调用</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="k">func</span> <span class="n">animate</span><span class="p">(</span><span class="n">withDuration</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptions</span> <span class="o">=</span> <span class="p">[],</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">@</span><span class="n">escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">,</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">((</span><span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>options</code> 可以设置一个或者多个，以数组的形式</li>
</ul>


<h4>UIViewAnimationOptions</h4>

<h5>常规属性（可以设置多个）</h5>

<ul>
<li>layoutSubviews

<ul>
<li>layout子View，让他们随父view一起动画</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>必须重写view的LayoutSubViews方法</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">//  MTAnimateView.swift</span>
</span><span class='line'><span class="k">class</span> <span class="nl">MTAnimateView</span><span class="p">:</span> <span class="bp">UIView</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">subview</span><span class="p">:</span> <span class="bp">UIView</span><span class="o">!</span>
</span><span class='line'>    <span class="kr">override</span> <span class="k">func</span> <span class="n">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">bounds</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>        <span class="n">subview</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">bounds</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="n">bounds</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//UIViewController.swift</span>
</span><span class='line'><span class="k">class</span> <span class="nl">ViewController</span><span class="p">:</span> <span class="bp">UIViewController</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">var</span> <span class="nl">redView</span><span class="p">:</span> <span class="n">MTAnimateView</span><span class="o">!</span>
</span><span class='line'>    <span class="c1">//动画block 扩大bounds，长宽各100，不带`layoutSubviews` 动画效果就很奇怪</span>
</span><span class='line'>    <span class="k">func</span> <span class="n">animateWithLayoutSubViews</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">orginBounds</span> <span class="o">=</span> <span class="n">redView</span><span class="p">.</span><span class="n">bounds</span>
</span><span class='line'>        <span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">layoutSubviews</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">bounds</span> <span class="o">=</span> <span class="bp">CGRect</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="n">orginBounds</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="n">orginBounds</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="nl">width</span><span class="p">:</span> <span class="n">orginBounds</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="mi">100</span><span class="p">,</span> <span class="nl">height</span><span class="p">:</span> <span class="n">orginBounds</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'>        <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">bounds</span> <span class="o">=</span> <span class="n">orginBounds</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>allowUserInteraction

<ul>
<li>响应动画时的用户交互</li>
</ul>
</li>
<li><p>beginFromCurrentState</p>

<blockquote><p>If this key is not present, all in-flight animations are allowed to finish before the new animation is started. If another animation is not in flight, this key has no effect.</p></blockquote></li>
<li><p>`repeat`</p>

<ul>
<li>重复动画</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">repeat</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//重复执行3次</span>
</span><span class='line'>            <span class="bp">UIView</span><span class="p">.</span><span class="n">setAnimationRepeatCount</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>autoreverse

<ul>
<li>与<code>repeat</code>配合使用，动画能回溯</li>
</ul>
</li>
<li>overrideInheritedDuration

<ul>
<li>忽略嵌套动画的时间,使用自己设置的<code>duration</code></li>
</ul>
</li>
<li>overrideInheritedCurve

<ul>
<li>忽略嵌套动画的时间曲线，使用自己设置的时间曲线</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>嵌套动画</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="mf">2.0</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">curveEaseIn</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">redViewNewCenter</span>
</span><span class='line'>        <span class="bp">UIView</span><span class="p">.</span><span class="n">animate</span><span class="p">(</span><span class="nl">withDuration</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="nl">delay</span><span class="p">:</span> <span class="mf">0.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">[.</span><span class="n">curveEaseOut</span><span class="p">,</span> <span class="p">.</span><span class="n">overrideInheritedDuration</span><span class="p">,</span> <span class="p">.</span><span class="n">overrideInheritedCurve</span><span class="p">],</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">blueView</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">blueViewNewCenter</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">blueView</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">blueViewOriginalCenter</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span> <span class="p">{</span> <span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">in</span>
</span><span class='line'>        <span class="nb">self</span><span class="p">.</span><span class="n">redView</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">redViewOriginalCenter</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>allowAnimatedContent

<ul>
<li>动画的时候，重绘View，没设置这个选项的时候，动画都是使用的截图</li>
</ul>
</li>
<li>showHideTransitionViews

<ul>
<li>用于转场动画</li>
</ul>
</li>
</ul>


<blockquote><p>When present, this key causes views to be hidden or shown (instead of removed or added) when performing a view transition. Both views must already be present in the parent view’s hierarchy when using this key. If this key is not present, the to-view in a transition is added to, and the from-view is removed from, the parent view’s list of subviews.</p></blockquote>

<ul>
<li>overrideInheritedOptions</li>
</ul>


<h5>速度属性 （可以设置一个）</h5>

<ul>
<li>curveEaseInOut

<ul>
<li>开始慢，中间加速，结尾慢</li>
</ul>
</li>
<li>curveEaseIn

<ul>
<li>开始慢，一直加速</li>
</ul>
</li>
<li>curveEaseOut

<ul>
<li>开始快，一直减速</li>
</ul>
</li>
<li>curveLinear

<ul>
<li>均匀的</li>
</ul>
</li>
</ul>


<h5>转场动画属性 （可以设置一个）</h5>

<ul>
<li>transitionFlipFromLeft</li>
<li>transitionFlipFromRight</li>
<li>transitionCurlUp</li>
<li>transitionCurlDown</li>
<li>transitionCrossDissolve</li>
<li>transitionFlipFromTop</li>
<li>transitionFlipFromBottom</li>
<li>preferredFramesPerSecond30</li>
<li>preferredFramesPerSecond60</li>
</ul>


<h3>嵌套动画</h3>

<p>嵌套动画，是嵌套在其他动画block中的动画，他开始动画的时间和他父动画一样，并且继承父动画的时间，时间曲线和其他动画配置。
可以通过<code>overrideInheritedDuration</code>、<code>overrideInheritedCurve</code> 来使用自己的配置做动画</p>

<h3>转场动画 (动画效果比较浮夸，用的较少)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="k">func</span> <span class="n">transition</span><span class="p">(</span><span class="n">with</span> <span class="nl">view</span><span class="p">:</span> <span class="bp">UIView</span><span class="p">,</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptions</span> <span class="o">=</span> <span class="p">[],</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span><span class="p">,</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">((</span><span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在<code>view</code>中进行转场动画</li>
<li>在<code>animations</code>中可以add、remove、hide、show view，如果想要其他动画效果，需要配置<code>allowAnimatedContent</code></li>
</ul>


<figure class='code'><figcaption><span>示例</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="bp">UIView</span><span class="p">.</span><span class="n">transition</span><span class="p">(</span><span class="nl">with</span><span class="p">:</span> <span class="n">redView</span><span class="p">,</span> <span class="nl">duration</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">transitionFlipFromLeft</span><span class="p">,</span> <span class="nl">animations</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">greenView</span><span class="p">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>            <span class="nb">self</span><span class="p">.</span><span class="n">blueView</span><span class="p">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="k">func</span> <span class="n">transition</span><span class="p">(</span><span class="n">from</span> <span class="nl">fromView</span><span class="p">:</span> <span class="bp">UIView</span><span class="p">,</span> <span class="n">to</span> <span class="nl">toView</span><span class="p">:</span> <span class="bp">UIView</span><span class="p">,</span> <span class="nl">duration</span><span class="p">:</span> <span class="n">TimeInterval</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="n">UIViewAnimationOptions</span> <span class="o">=</span> <span class="p">[],</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">((</span><span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span><span class="o">?</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>这个方法，从<code>fromView</code>转场到<code>toView</code></li>
<li>系统实现是直接从视图层级中移除，可以使用 <code>showHideTransitionViews</code> 只是显示和隐藏两个view</li>
</ul>

]]></content>
  </entry>
  
</feed>
